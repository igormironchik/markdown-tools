pick 318aceb Add test for Makefile highlighting
p 4c7182a Add first batch of test files resurrected from Kate 4.6
r 6f7d8a7 Sync xml files with KTextEditor
reword 8f0dbdc Add another batch of resurrected tests from Kate 4.6
e 828de45 Add some more resurrected tests from Kate 4.6
edit 6aa6264 Add simple coverage information for syntax definition tests
s 63df253 Add more syntax highlighting tests from Kate 4.6
squash 3e7771f Add three more tests recovered from Kate 4.6
f 5c7fd91 Add Kate 4.6 ASP syntax test
f -c 5c7fd91 Add Kate 4.6 ASP syntax test
fixup 7a777ff Implement case-sensitive overrides for keyword rules
fixup -C 7a777ff Implement case-sensitive overrides for keyword rules
exec 2b16665 Implement dynamic DetectChar rules
x 0b703a3 Add a few more tests from the Kate 4.6 test suite
d dd808dc Quote captured strings we replace in regular expressions
drop dd808dc Quote captured strings we replace in regular expressions
b afafafaffa
break afafafaffa
l label
label afafafaffa
t label
reset afafafaffa
m label # bla bla bla
merge -c afafafaffa label
u ref
update-ref ref

# Rebase a27a854..0b703a3 onto a27a854 (13 command(s))
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
