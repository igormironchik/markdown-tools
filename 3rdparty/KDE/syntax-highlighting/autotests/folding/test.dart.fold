import 'dart:io' show File;
<beginfold id='1'>/**</beginfold id='1'>
 * print a number
 * "helo"
 * 'string'
 <endfold id='1'>*/</endfold id='1'>

const List<int> list = [1];

String s = <beginfold id='2'>'''</beginfold id='2'>
Multline string single quote
<endfold id='2'>'''</endfold id='2'>;

String d = <beginfold id='2'>'''</beginfold id='2'>
Multline string double quote
<endfold id='2'>'''</endfold id='2'>;

enum Enum <beginfold id='3'>{</beginfold id='3'> one, two <endfold id='3'>}</endfold id='3'>

class SimpleClass <beginfold id='3'>{</beginfold id='3'><endfold id='3'>}</endfold id='3'>

abstract class Interface extends SimpleClass <beginfold id='3'>{</beginfold id='3'><endfold id='3'>}</endfold id='3'>

final class Dummy <beginfold id='3'>{</beginfold id='3'><endfold id='3'>}</endfold id='3'>

Stream<int> gen() async* <beginfold id='3'>{</beginfold id='3'>
  for (int i = 0; i < 100; ++i) <beginfold id='3'>{</beginfold id='3'>
    yield switch (i) <beginfold id='3'>{</beginfold id='3'>
      1 => 1,
      _ => throw "Invalid",
    <endfold id='3'>}</endfold id='3'>;
    yield i;
  <endfold id='3'>}</endfold id='3'>
<endfold id='3'>}</endfold id='3'>

Future<int> printNum(int anum) async <beginfold id='3'>{</beginfold id='3'>
  print("This is a $anum\n");
  print('This is a $anum\n \'world\'');
  if (anum == 1) <beginfold id='3'>{</beginfold id='3'>
    switch (anum) <beginfold id='3'>{</beginfold id='3'>
      case 1:
        return 3;
      default:
        // do while
        do <beginfold id='3'>{</beginfold id='3'>
          anum--;
        <endfold id='3'>}</endfold id='3'> while (anum < 0);
        // while
        while (anum > 0) <beginfold id='3'>{</beginfold id='3'>
          anum--;
        <endfold id='3'>}</endfold id='3'>
        break;
    <endfold id='3'>}</endfold id='3'>
    return 1;
  <endfold id='3'>}</endfold id='3'> else <beginfold id='3'>{</beginfold id='3'>
    return 2;
  <endfold id='3'>}</endfold id='3'>
<endfold id='3'>}</endfold id='3'>

// What are you doing?
void main() <beginfold id='3'>{</beginfold id='3'>
  final int nn = 10;
  double dd = 1.5;
  double de = double.nan;
  bool boolean = true;
  printNum(nn);
<endfold id='3'>}</endfold id='3'>
