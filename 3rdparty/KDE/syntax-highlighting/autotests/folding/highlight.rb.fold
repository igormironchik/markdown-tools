# This file is a testcase for the highlighting of Ruby code
# It's not executable code, but a collection of code snippets
#

require 'Config'
require 'DO/Clients'
require 'DO/DBClients'

  <beginfold id='1'>def</beginfold id='1'> CGI::escapeElement(string, *elements)
    elements = elements[0] if elements[0].kind_of?(Array)
    <beginfold id='1'>unless</beginfold id='1'> elements.empty?
      string.gsub(/<\/?(?:#{elements.join("|")})(?!\w)(?:.|\n)*?>/ni) <beginfold id='1'>do</beginfold id='1'>
        CGI::escapeHTML($&)
      <endfold id='1'>end</endfold id='1'>
    <endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
      string
    <endfold id='1'>end</endfold id='1'>
  <endfold id='1'>end</endfold id='1'>

<beginfold id='1'>case</beginfold id='1'> inputLine
  when "debug"
    dumpDebugInfo
    dumpSymbols
  when /p\s+(\w+)/
    dumpVariable($1)
  when "quit", "exit"
    exit
  <endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
    print "Illegal command: #{inputLine}"
<endfold id='1'>end</endfold id='1'>


kind = <beginfold id='1'>case</beginfold id='1'> year #hi there
         when 1850..1889 then "Blues"
         when 1890..1909 then "Ragtime"
         when 1910..1929 then "New Orleans Jazz"
         when 1930..1939 then "Swing"
         when 1940..1950 then "Bebop"
         <endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>                 "Jazz"
       <endfold id='1'>end</endfold id='1'>

  # URL-encode a string.
  #   url_encoded_string = CGI::escape("'Stop!' said Fred")
  #      # => "%27Stop%21%27+said+Fred"
  <beginfold id='1'>def</beginfold id='1'> CGI::escape(string)
    string.gsub(/([^ a-zA-Z0-9_.-]+)/n) <beginfold id='1'>do</beginfold id='1'>
      '%' + $1.unpack('H2' * $1.size).join('%').upcase
    <endfold id='1'>end</endfold id='1'>.tr(' ', '+')
  <endfold id='1'>end</endfold id='1'>


# Class ClientManager
#
# definition : Import, store and export the various data used by the application.
# This class is the sole interface between the application and the underlying database.

mon, day, year = $1, $2, $3 if /(\d\d)-(\d\d)-(\d\d)/
puts "a = #{a}" if fDebug
print total unless total == 0

<beginfold id='1'>while</beginfold id='1'> gets
  next if /^#/            # Skip comments
  parseLine unless /^$/   # Don't parse empty lines
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>if</beginfold id='1'> artist == "John Coltrane" #hi there
  artist = "'Trane" #hi there
<endfold id='1'>end</endfold id='1'> unless nicknames == "no" #hi there

handle <beginfold id='1'>= if</beginfold id='1'> aSong.artist == "Gillespie" then #hi there
           "Dizzy"
         <endfold id='1'></endfold id='1'><beginfold id='1'>elsif</beginfold id='1'> aSong.artist == "Parker" then
           "Bird"
         <endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'> #hi there
           "unknown"
         <endfold id='1'>end</endfold id='1'>

<beginfold id='1'>if</beginfold id='1'> aSong.artist == "Gillespie" then  handle = "Dizzy"
<endfold id='1'></endfold id='1'><beginfold id='1'>elsif</beginfold id='1'> aSong.artist == "Parker" then  handle = "Bird"
<endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>  handle = "unknown"
<endfold id='1'>end</endfold id='1'> #hi there

<beginfold id='1'>if</beginfold id='1'> aSong.artist == "Gillespie" then
  handle = "Dizzy"
<endfold id='1'></endfold id='1'><beginfold id='1'>elsif</beginfold id='1'> aSong.artist == "Parker" then
  handle = "Bird"
<endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
  handle = "unknown"
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>if</beginfold id='1'> aSong.artist == "Gillespie"
  handle = "Dizzy"
<endfold id='1'></endfold id='1'><beginfold id='1'>elsif</beginfold id='1'> aSong.artist == "Parker"
  handle = "Bird"
<endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
  handle = "unknown"
<endfold id='1'>end</endfold id='1'>

 <beginfold id='1'>case</beginfold id='1'> line
  when /title=(.*)/
    puts "Title is #$1"
  when /track=(.*)/
    puts "Track is #$1"
  when /artist=(.*)/
    puts "Artist is #$1"
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>case</beginfold id='1'> shape
  when Square, Rectangle
    # ...
  when Circle
    # ...
  when Triangle
    # ...
  <endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
    # ...
<endfold id='1'>end</endfold id='1'> 


<beginfold id='1'>until</beginfold id='1'> playList.duration > 60 #hi there
  playList.add(songList.pop)
<endfold id='1'>end</endfold id='1'>

3.times <beginfold id='1'>do</beginfold id='1'>
  print "Ho! "
<endfold id='1'>end</endfold id='1'>

loop <beginfold id='1'>{</beginfold id='1'>
  # block ...
<endfold id='1'>}</endfold id='1'>

songList.each <beginfold id='1'>do</beginfold id='1'> |aSong|
  aSong.play
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>for</beginfold id='1'> aSong in songList
  aSong.play
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>for</beginfold id='1'> i in ['fee', 'fi', 'fo', 'fum']
  print i, " "
<endfold id='1'>end</endfold id='1'>
<beginfold id='1'>for</beginfold id='1'> i in 1..3
  print i, " "
<endfold id='1'>end</endfold id='1'>
<beginfold id='1'>for</beginfold id='1'> i in File.open("ordinal").find_all <beginfold id='1'>{</beginfold id='1'> |l| l =~ /d$/<endfold id='1'>}</endfold id='1'>
  print i.chomp, " "
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>class</beginfold id='1'> Periods
  <beginfold id='1'>def</beginfold id='1'> each
    yield "Classical"
    yield "Jazz"
    yield "Rock"
  <endfold id='1'>end</endfold id='1'>
<endfold id='1'>end</endfold id='1'>


periods = Periods.new
<beginfold id='1'>for</beginfold id='1'> genre in periods
  print genre, " "
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>while</beginfold id='1'> gets
  next if /^\s*#/   # skip comments
  break if /^END/   # stop at end
                    # substitute stuff in backticks and try again
  redo if gsub!(/`(.*?)`/) <beginfold id='1'>{</beginfold id='1'> eval($1) <endfold id='1'>}</endfold id='1'>
  # process line ...
<endfold id='1'>end</endfold id='1'>

i=0
loop <beginfold id='1'>do</beginfold id='1'>
  i += 1
  next if i < 3
  print i
  break if i > 4
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>for</beginfold id='1'> i in 1..100
  print "Now at #{i}. Restart? "
  retry if gets =~ /^y/i
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>def</beginfold id='1'> doUntil(cond)
  yield
  retry unless cond
<endfold id='1'>end</endfold id='1'>

i = 0
doUntil(i > 3) <beginfold id='1'>{</beginfold id='1'>
  print i, " "
  i += 1
<endfold id='1'>}</endfold id='1'>

<beginfold id='1'>def</beginfold id='1'> system_call
	# ... code which throws SystemCallError
<endfold id='1'></endfold id='1'><beginfold id='1'>rescue</beginfold id='1'> SystemCallError
	$stderr.print "IO failed: " + $!
	opFile.close
	File.delete(opName)
	raise
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>class</beginfold id='1'> ClientManager
	
	# constructor
	<beginfold id='1'>def</beginfold id='1'> initialize(dbase)
		@dbClient = DBClient.new(dbase)
		@clients = Clients.new
	<endfold id='1'>end</endfold id='1'>
	
	<beginfold id='1'>def</beginfold id='1'> prout(a, b, xy="jj") 24 <endfold id='1'>end</endfold id='1'> 
	###############################################################
	#
	# CLIENTS SECTION
	#
	###############################################################
	
	# update the clients object by retrieving the related data from the database
	# returns the number of clients
	<beginfold id='1'>def</beginfold id='1'> refreshClients
		@clients.clean
		<beginfold id='1'>unless</beginfold id='1'> @sqlQuery.nil? then
			@sqlQuery.selectClient.each <beginfold id='1'>do</beginfold id='1'> |row|
				@clients.addClient(row[0],row[1],row[2],row[3],row[4],row[5], row[6], row[7], row[8])
			<endfold id='1'>end</endfold id='1'>
		<endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
			puts "SqlQuery wasn't created : cannot read data from database"
		<endfold id='1'>end</endfold id='1'>
		return @clients.length
	<endfold id='1'>end</endfold id='1'>
	
	# insert a client in the database and refreshes the local clients object
	# we assume that none of the arguments is null
	# we assume that the client, identified by raison_sociale doesn't already exists
	<beginfold id='1'>def</beginfold id='1'> addClient(raison_sociale, division, departement, adresse, cp, ville, nom_contact, tel_contact)
		id = "0"
		<beginfold id='1'>unless</beginfold id='1'> @sqlQuery.nil? then
			id = @sqlQuery.insertClient(raison_sociale, division, departement, adresse, cp, ville, nom_contact,tel_contact)
		<endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
			puts "SqlQuery wasn't created : database update cannot be performed"
		<endfold id='1'>end</endfold id='1'>
		@clients.addClient(id, raison_sociale, division, departement, adresse, cp, ville, nom_contact, tel_contact) # synchronize local object with DB
	<endfold id='1'>end</endfold id='1'>
	
	# deletes a client from the database and updates the local Clients object accordingly
	<beginfold id='1'>def</beginfold id='1'> delClient(nomclient_brut)
		raison_sociale, div, dep = Clients.getIdentifiers(nomclient_brut)
		listeContratsExp, listeContratsSup, listeContratsProd, listePropositionsExp, listePropositionsSup = []

		listeContratsExp = @contratsExpertise.getContratsFromClient(nomclient_brut)
		listeContratsSup = @contratsSupport.getContratsFromClient(nomclient_brut)
		listeContratsProd = @contratsProduits.getContratsFromClient(nomclient_brut)
		listePropositionsExp = @propositionsExpertise.getPropositionsFromClient(nomclient_brut)
		listePropositionsSup = @propositionsSupport.getPropositionsFromClient(nomclient_brut)
		
		<beginfold id='1'>unless</beginfold id='1'> @sqlQuery.nil? then
			@sqlQuery.deleteClient(raison_sociale, div, dep)
			
			@sqlQuery.deleteContracts(Config::EXPERTISE,listeContratsExp) 
			@sqlQuery.deleteContracts(Config::SUPPORT,listeContratsSup)
			@sqlQuery.deleteContracts(Config::PRODUIT,listeContratsProd)
			@sqlQuery.deletePropositions(Config::EXPERTISE,listePropositionsExp)
			@sqlQuery.deletePropositions(Config::SUPPORT,listePropositionsSup)
		<endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
			puts "SqlQuery wasn't created : database update cannot be performed"
		<endfold id='1'>end</endfold id='1'>
		@clients.delClient(raison_sociale,div,dep)
	
		@contratsExpertise.deleteContracts(listeContratsExp)
		@contratsSupport.deleteContracts(listeContratsSup)
		@contratsProduits.deleteContracts(listeContratsProd)
		@propositionsExpertise.deletePropositions(listePropositionsExp)
		@propositionsSupport.deletePropositions(listePropositionsSup)
	<endfold id='1'>end</endfold id='1'>
<endfold id='1'>end</endfold id='1'>

  # Mixin module for HTML version 3 generation methods.
  <beginfold id='1'>module</beginfold id='1'> Html3 # :nodoc:

    # The DOCTYPE declaration for this version of HTML
    <beginfold id='1'>def</beginfold id='1'> doctype
<beginfold id='2'>      %</beginfold id='2'>|<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><endfold id='2'>|</endfold id='2'>
    <endfold id='1'>end</endfold id='1'>

    # Initialise the HTML generation methods for this version.
    <beginfold id='1'>def</beginfold id='1'> element_init
      extend TagMaker
      methods = ""
      # - -
      <beginfold id='1'>for</beginfold id='1'> element in<beginfold id='2'> %</beginfold id='2'>w[ A TT I B U STRIKE BIG SMALL SUB SUP EM STRONG
          DFN CODE SAMP KBD VAR CITE FONT ADDRESS DIV center MAP
          APPLET PRE XMP LISTING DL OL UL DIR MENU SELECT table TITLE
          STYLE SCRIPT H1 H2 H3 H4 H5 H6 TEXTAREA FORM BLOCKQUOTE
          CAPTION <endfold id='2'>]</endfold id='2'>
        methods +=<beginfold id='3'> <<-</beginfold id='3'>BEGIN + nn_element_def(element) + <<-END
          def #{element.downcase}(attributes = {})
        <endfold id='3'>BEGIN</endfold id='3'>
          <endfold id='1'>end</endfold id='1'>
        END
      <endfold id='1'>end</endfold id='1'>

      # - O EMPTY
      <beginfold id='1'>for</beginfold id='1'> element in<beginfold id='2'> %</beginfold id='2'>w[ IMG BASE BASEFONT BR AREA LINK PARAM HR INPUT
          ISINDEX META <endfold id='2'>]</endfold id='2'>
        methods +=<beginfold id='3'> <<-</beginfold id='3'>BEGIN + nOE_element_def(element) + <<-END
          def #{element.downcase}(attributes = {})
        <endfold id='3'>BEGIN</endfold id='3'>
          <endfold id='1'>end</endfold id='1'>
        END
      <endfold id='1'>end</endfold id='1'>

      # O O or - O
      <beginfold id='1'>for</beginfold id='1'> element in<beginfold id='2'> %</beginfold id='2'>w[ HTML HEAD BODY P PLAINTEXT DT DD LI OPTION tr
          th td <endfold id='2'>]</endfold id='2'>
        methods +=<beginfold id='3'> <<-</beginfold id='3'>BEGIN + nO_element_def(element) + <<-END
          def #{element.downcase}(attributes = {})
        <endfold id='3'>BEGIN</endfold id='3'>
          <endfold id='1'>end</endfold id='1'>
        END
      <endfold id='1'>end</endfold id='1'>
      eval(methods)
    <endfold id='1'>end</endfold id='1'>

  <endfold id='1'>end</endfold id='1'>

# following snippet from Webrick's log.rb
# notice the erronous handling of the query method is_a?
<beginfold id='1'>def</beginfold id='1'> format(arg)
     str <beginfold id='1'>= if</beginfold id='1'> arg.is_a?(Exception)
        "#{arg.class}: #{arg.message}\n\t" <<
        arg.backtrace.join("\n\t") << "\n"
      <endfold id='1'></endfold id='1'><beginfold id='1'>elsif</beginfold id='1'> arg.respond_to?(:to_str)
        arg.to_str
      <endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
        arg.inspect
      <endfold id='1'>end</endfold id='1'>
<endfold id='1'>end</endfold id='1'>

# following snippet from Webrick's httputils.rb
# Splitting regexps on several lines might be bad form,
# but not illegal in Ruby. 
# This should probably be supported in the highlighting
<beginfold id='1'>def</beginfold id='1'> split_header_value(str)
      str.scan(/((?:"(?:\\.|[^"])+?"|[^",]+)+)
                (?:,\s*|\Z)/xn).collect<beginfold id='1'>{</beginfold id='1'>|v| v[0] <endfold id='1'>}</endfold id='1'>
<endfold id='1'>end</endfold id='1'>

# snippet from Net::Telnet
string.gsub(/#{IAC}(
                   [#{IAC}#{AO}#{AYT}#{DM}#{IP}#{NOP}]|
                   [#{DO}#{DONT}#{WILL}#{WONT}]
                     [#{OPT_BINARY}-#{OPT_NEW_ENVIRON}#{OPT_EXOPL}]|
                   #{SB}[^#{IAC}]*#{IAC}#{SE}
                 )/xno)

# following snippet from Webrick's httpresponse.rb
# the HEREDOC is not recognized as such
@body <<<beginfold id='3'> <<-</beginfold id='3'>_end_of_html_
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<HTML>
  <HEAD><TITLE>#{HTMLUtils::escape(@reason_phrase)}</TITLE></HEAD>
  <BODY>
    <H1>#{HTMLUtils::escape(@reason_phrase)}</H1>
    #{HTMLUtils::escape(ex.message)}
    <HR>
<endfold id='3'>_end_of_html_</endfold id='3'>


# snippet from Webrick's httpproxy.rb
# here we should make sure that the symbol definition ':' doesn't override
# the module operator '::'
Net::HTTP::version_1_2 if RUBY_VERSION < "1.7"

# snippet from Webrick's cookie.rb
# the beginning of the regexp is erronously highlighted like an operator
key, val = x.split(/=/,2)

# the following are division operators
# it's a bit tricky to keep the operator apart from the regexp
result = 8 / 4
result /= divisor

# 2008-06-01 regexp and division operator syntax has been fixed:
result = 8/4    # division
result = 8/foo  # division
result = /8/    # regexp
result = 8//4/  # division and regexp

10/10           # division
10/ 10          # division
10 /10          # division
10 / 10         # division

foo/10          # division
foo/ 10         # division
foo /10/        # regexp
foo / 10        # division

foo/10/10       # both division
total/count/2   # both division
total/(count/2) # both division

@foo/10         # division
@foo /10        # division

"hello"/10      # division
"hello" / 10    # division

/regexp//10     # division
/regexp/ / 10   # division

Math::PI/10     # division
Math::foo /rx/  # regexp

# 2008-06-05 similar fix for modulo operator:

10%4            # modulo
10 %4           # modulo
10% 4           # modulo
10 % 4          # modulo

foo%4           # modulo
# foo %4          # illegal %string
foo% 4          # modulo
foo % 4         # modulo

foo % (4)       # modulo

foo <beginfold id='2'>%</beginfold id='2'>(4<endfold id='2'>)</endfold id='2'>        # %string
foo <beginfold id='2'>%</beginfold id='2'>q(4<endfold id='2'>)</endfold id='2'>       # %string
foo <beginfold id='2'>%</beginfold id='2'>Q(4<endfold id='2'>)</endfold id='2'>       # %string
foo <beginfold id='2'>%</beginfold id='2'>%4<endfold id='2'>%</endfold id='2'>        # %string

foo =<beginfold id='2'> %</beginfold id='2'>|blah<endfold id='2'>|</endfold id='2'>   # GDL input
foo %<beginfold id='2'> %</beginfold id='2'>|blah<endfold id='2'>|</endfold id='2'>   # modulo and GDL

# mix in any way you want
result = 10//regexp//20/foo//regexp//20

# test cases for general delimited input
# quoted strings
<beginfold id='2'>%</beginfold id='2'>Q|this is a string<endfold id='2'>|</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>Q{this is a string<endfold id='2'>}</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>Q(this is a string<endfold id='2'>)</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>Q<this is a string<endfold id='2'>></endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>Q[this is a string<endfold id='2'>]</endfold id='2'>

<beginfold id='2'>%</beginfold id='2'>|also a string<endfold id='2'>|</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>{also a string<endfold id='2'>}</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>(also a string<endfold id='2'>)</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'><also a string<endfold id='2'>></endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>[also a string<endfold id='2'>]</endfold id='2'>

# apostrophed strings
<beginfold id='2'>%</beginfold id='2'>q|apostrophed<endfold id='2'>|</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>q{apostrophed<endfold id='2'>}</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>q(apostrophed<endfold id='2'>)</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>q<apostrophed<endfold id='2'>></endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>q[apostrophed<endfold id='2'>]</endfold id='2'>

# regular expressions
<beginfold id='2'>%</beginfold id='2'>r{expression<endfold id='2'>}</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>r(expression<endfold id='2'>)</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>r<expression<endfold id='2'>></endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>r[expression<endfold id='2'>]</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>r|expression<endfold id='2'>|</endfold id='2'>

# shell commands
<beginfold id='2'>%</beginfold id='2'>x{ls -l<endfold id='2'>}</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>x(ls -l<endfold id='2'>)</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>x<ls -l<endfold id='2'>></endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>x[ls -l<endfold id='2'>]</endfold id='2'>

# sometimes it's useful to have the command on multiple lines
<beginfold id='2'>%</beginfold id='2'>x{ls -l |
grep test <endfold id='2'>}</endfold id='2'>

# alternative syntax
`ls -l`
`echo ' '`

# token array
<beginfold id='2'>%</beginfold id='2'>w{one two three<endfold id='2'>}</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>w(one two three<endfold id='2'>)</endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>w<one two three<endfold id='2'>></endfold id='2'>
<beginfold id='2'>%</beginfold id='2'>w[one two three<endfold id='2'>]</endfold id='2'>

# snippet from Net::IMAP
# I object to putting String, Integer and Array into kernel methods.
# While these classes are builtin in Ruby, this is an implementation detail
# that should not be exposed to the user.
# If we want to handle all std-lib classes, fine. But then they should be in their
# own std-lib keyword category.

<beginfold id='1'>def</beginfold id='1'> send_data(data)
      <beginfold id='1'>case</beginfold id='1'> data
      when nil
        put_string("NIL")
      when String
        send_string_data(data)
      when Integer
        send_number_data(data)
      when Array
        send_list_data(data)
      when Time
        send_time_data(data)
      when Symbol
        send_symbol_data(data)
      <endfold id='1'></endfold id='1'><beginfold id='1'>else</beginfold id='1'>
        data.send_data(self)
      <endfold id='1'>end</endfold id='1'>
<endfold id='1'>end</endfold id='1'>

# snippet from Net::POP
# class names can have numbers in them as long as they don't begin with numbers
# Ruby doesn't internally really make much of a difference between a class name and a constant

# class aliases
  POP = POP3
  POPSession  = POP3
  POP3Session = POP3

# "member access"
POP::Session.COUNT.attribute.calc_with(2)<beginfold id='1'>{</beginfold id='1'> |arg| puts arg <endfold id='1'>}</endfold id='1'>

# snippet from Net::SMTP
# This breaks the code folding. I think we would need to
# handle the '\' that continues the statement to the next line
# in some way to make these kind of things not break something.
raise ArgumentError, 'both user and secret are required'\
                      unless user and secret
 
# string escapes must detect escaping the escape char
str = "\\"
str = "\\\\"
# this is not part of the string
<beginfold id='2'>%</beginfold id='2'>x{echo \\\}\\<endfold id='2'>}</endfold id='2'>	# prints \}\
# this is not part of the command

# these are all symbols
:abc
:abc!
:abc?
:abc=
:[]
:[]=
:@abc
:@@abc
:$abc

# squiggly HEREDOC
<beginfold id='3'>    <<~</beginfold id='3'>HEREDOC
      Hello!!
    <endfold id='3'>HEREDOC</endfold id='3'>

# HEREDOC with backticks
<beginfold id='3'><<</beginfold id='3'>`HEREDOC`
    echo "hello"
<endfold id='3'>HEREDOC</endfold id='3'>

# do not highlight HEREDOC markers after the "class" keyword
# (singleton class definition) (bug: #358273)
<beginfold id='1'>class</beginfold id='1'> <<Foo = Object.new
  attr_accessor :foo
<endfold id='1'>end</endfold id='1'>
singleton_class = ( <beginfold id='1'>class</beginfold id='1'> <<foo; self; <endfold id='1'>end</endfold id='1'> )

# highlight regular expressions after ": " (bug: #361875)
get 'files/:slug/:filename', to: 'files#download', slug: /^[a-z]+$/, filename: <beginfold id='2'>%</beginfold id='2'>r|^[/\s]+$<endfold id='2'>|</endfold id='2'>
@@hello!: /regexp/
[]=: <beginfold id='2'>%</beginfold id='2'>r!regexp<endfold id='2'>!</endfold id='2'>

# refinements and its usage
<beginfold id='1'>module</beginfold id='1'> Constantize
  refine String <beginfold id='1'>do</beginfold id='1'>
    <beginfold id='1'>def</beginfold id='1'> constantize
      ::Kernel.const_get(self)
    <endfold id='1'>end</endfold id='1'>
  <endfold id='1'>end</endfold id='1'>
<endfold id='1'>end</endfold id='1'>

<beginfold id='1'>class</beginfold id='1'> MyClass
  using Constantize

  SOME_CONST = "Kate is cool!"

  <beginfold id='1'>def</beginfold id='1'> self.method_using_refinement
    "MyClass::SOME_CONST".constantize
  <endfold id='1'>end</endfold id='1'>
<endfold id='1'>end</endfold id='1'>

puts MyClass.method_using_refinement
