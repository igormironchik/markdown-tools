<beginfold id='1'>---</beginfold id='1'>
Title:    A Sample Markdown Document
Author:   Fletcher T. Penney
Date:     February 9, 2011
Comment:  This is a comment intended to demonstrate 
          metadata that spans multiple lines.
<endfold id='1'>---</endfold id='1'>

<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># H1

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## H2

<endfold id='4'></endfold id='4'><beginfold id='4'></beginfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>### H3

Multi-line paragraph bla bla bla
bla bla bla.

Intentional line break  
via two spaces at line.

Formats: _italic_, **bold**, `monospace`, ~~strikeout~~, ==highlight==

Emoji: :joy: :+1:

Table:

| Syntax      | Description | Test Text | Note |
| :---        |    :----:   |      ---: | ---- |
| Header      | Title       | \| this   |      |

Bullet list:

* item1
* item2

Numbered list:

1. item 1
2. item 2

Task list:

- [x] Finish my changes
- [ ] Push my commits
- [ ] Open a pull request

A link as normal text: http://example.com

[link](http://kde.org)

Auto-link: <http://kate-editor.org>
Mail: <mailto:mark@kde.org>

This is [an example](http://example.com/ "Title") inline link.

See my [About](/about/) page for details.

This is [an example] [id] reference-style link.

[id]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/ 'Optional Title Here'
[bar]: http://example.com/ (Optional Title Here)
[id2]: <http://example.com/>  "Optional Title Here"

![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")

[![Alt text](https://url/to/img.svg)](https://link.com/example/)

    code 1
    code 2

normal text

> block quote _italic_
> more block quote

normal text

Title: some text

normal text

<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># Lists

1. item
   * This is a list item
     with multiple lines.
     <beginfold id='8'>```</beginfold id='8'>
     code
     <endfold id='8'>```</endfold id='8'>

     > This is a
     blockquote

     This is a new paragraph, which
     is part of the item in the
     previous list.

         indented code block

       Other paragraph.

     * subitem
       * subitem
         with multiple
            lines.

         New paragraph of
         the previous subitem.

             code block

          -----------------------

            Other paragraph of
            the subitem.

          30. numlist item
          31. numlist item

                 New paragraph of
                 the previous item.

                 > Blockquote

                  code block
  
              Other paragraph.

<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># Inline HTML

&copy;
<strong>bold</strong>
<code>code</code>

<<beginfold id='9'>table</beginfold id='9'>>
    <tr>
        <th>a</th>
        <th>b</th>
    </tr>
    <tr>
        <th><<beginfold id='10'>ul</beginfold id='10'>>
            <li>c</li>
            <li>d</li>
        </<endfold id='10'>ul</endfold id='10'>></th>
        <th>e</th>
    </tr>
</<endfold id='9'>table</endfold id='9'>>

normal text *italic*

<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># Code

`simple code`

``simple ` code``

```simple `` ` code ```

````simple`code````

normal text
    normal text
    normal text
        normal text

    code blocks are only allowed
    after an empty line.

* list
    list
    
    normal text
    
1. num-list
    num-list

    normal text

> quote
    quote
    
    code block

normal
<beginfold id='11'><!--</beginfold id='11'> comment <endfold id='11'>--></endfold id='11'>
    <!-- code, not comment -->
    code

normal

<beginfold id='11'>  <!--</beginfold id='11'> coment <endfold id='11'>--></endfold id='11'>
    code

<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># Fenced code blocks (bug 356974)

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Bash

<beginfold id='8'>```bash</beginfold id='8'>
#!/usr/bin/env bash

for f in *; <beginfold id='12'>do</beginfold id='12'>
    echo "$f"
<endfold id='12'>done</endfold id='12'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## C++

<beginfold id='8'>```cpp</beginfold id='8'>
#include <QtCore/QObject>

class Q : public QObject <beginfold id='13'>{</beginfold id='13'>
Q_OBJECT
public:
    Q();
<endfold id='13'>}</endfold id='13'>

Q::Q() :QObject(NULL) <beginfold id='13'>{</beginfold id='13'>
<endfold id='13'>}</endfold id='13'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## C

<beginfold id='8'>```c</beginfold id='8'>
#include <stdio.h>
#include "stdint.h"
#define SOME_VAR 1

static uint64_t intWithSuffix = 42ull + ~1233L;
static int octNum = 07232;
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## C#  ##

<beginfold id='8'>```csharp</beginfold id='8'>
var arr = new[] <beginfold id='14'>{</beginfold id='14'> 0, 1, 2, 3, 4 <endfold id='14'>}</endfold id='14'>;
var anon = new <beginfold id='14'>{</beginfold id='14'> Country = "Germany", Inhabitants = 80000000 <endfold id='14'>}</endfold id='14'>;
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## CMake

<beginfold id='8'>```cmake</beginfold id='8'>
cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

project (hello_world)

set(QT_MIN_VERSION "5.6.0")
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## CSS

<beginfold id='8'>```css</beginfold id='8'>
h1.main::hover <beginfold id='15'>{</beginfold id='15'>
    font-size: 100;
    color: green;
<endfold id='15'>}</endfold id='15'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Email

<beginfold id='8'>```email</beginfold id='8'>
From: Konqi Dragon <konqi@kde.org>
To: All <all@kde.og>
Subject: highlights
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Go

<beginfold id='8'>```go</beginfold id='8'>
package main

import "fmt"

func main() <beginfold id='16'>{</beginfold id='16'>
  fmt.Println("Hola, mundo.")
<endfold id='16'>}</endfold id='16'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Haskell

<beginfold id='8'>```haskell</beginfold id='8'>
module Main (main) where

main :: IO ()
main = putStrLn "Hello, World!"
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## HTML

<beginfold id='8'>```html</beginfold id='8'>
<html>
  <body>
    <p class="main">Hello world!</p>
  </body>
</html>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Java

<beginfold id='8'>```java</beginfold id='8'>
package fibsandlies;
import java.util.HashMap;

<beginfold id='17'>/**</beginfold id='17'>
 * This is an example of a Javadoc comment; Javadoc can compile documentation
 * from this text. Javadoc comments must immediately precede the class, method, or field being documented.
 <endfold id='17'>*/</endfold id='17'>
public class FibCalculator extends Fibonacci implements Calculator <beginfold id='18'>{</beginfold id='18'>

    private static Map<Integer, Integer> memoized = new HashMap<Integer, Integer>();
    public static void main(String[] args) <beginfold id='18'>{</beginfold id='18'>
        memoized.put(1, 1);
        memoized.put(2, 1);
        System.out.println(fibonacci(12));
    <endfold id='18'>}</endfold id='18'>
<endfold id='18'>}</endfold id='18'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## JavaScript

<beginfold id='8'>```js</beginfold id='8'>
function factorial(n) <beginfold id='19'>{</beginfold id='19'>
    if (n === 0) <beginfold id='19'>{</beginfold id='19'>
        return 1;  // 0! = 1
    <endfold id='19'>}</endfold id='19'>
    return n * factorial(n - 1);
<endfold id='19'>}</endfold id='19'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## JavaScript React (JSX)

<beginfold id='8'>```jsx</beginfold id='8'>
<beginfold id='20'><hello</beginfold id='20'> <endfold id='20'>/></endfold id='20'>
function Story(props) <beginfold id='21'>{</beginfold id='21'>
  const SpecificStory = components<beginfold id='22'>[</beginfold id='22'>props.storyType<endfold id='22'>]</endfold id='22'>;
  return <beginfold id='23'><SpecificStory</beginfold id='23'> story=<beginfold id='24'>{</beginfold id='24'> props.story <endfold id='24'>}</endfold id='24'> attr2="&ref;" attr3="Hello\n" <endfold id='23'>/></endfold id='23'>;
<endfold id='21'>}</endfold id='21'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## JSON

<beginfold id='8'>```json</beginfold id='8'>
<beginfold id='25'>[</beginfold id='25'><beginfold id='26'>{</beginfold id='26'>
    "hello": "world",
    "count": 1,
    "bool": true
<endfold id='26'>}</endfold id='26'><endfold id='25'>]</endfold id='25'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Matlab

<beginfold id='8'>```matlab</beginfold id='8'>
% Numbers _____________________________________________
5, 5.5, .1, 0.1, 0.4e5, 1.2e-5, 5i, 5.3i, 6j, .345+3i
5', 5.5', .1', 0.1', 0.4e5', 1.2e-5', 5i', 5.3i', 6j', .345+3i'
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Markdown

<beginfold id='8'>```markdown</beginfold id='8'>
**bold** `code`
> quote

<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Mustache/Handlebars

<beginfold id='8'>```handlebars</beginfold id='8'>
<beginfold id='27'>{{#movie</beginfold id='27'>}}
    <beginfold id='28'><div</beginfold id='28'>>
        <h1>{{title}}</h1>
        <img src="{{poster}}" alt="{{title}}"/>
    <endfold id='28'></div</endfold id='28'>>
    <beginfold id='28'><div</beginfold id='28'>>
        Rating - {{ratings.critics_rating}}
    <endfold id='28'></div</endfold id='28'>>
<endfold id='27'>{{/movie}}</endfold id='27'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Perl

<beginfold id='8'>```perl</beginfold id='8'>
my $var = shift;

$var =~ s<beginfold id='29'>/</beginfold id='29'>bla<endfold id='29'></endfold id='29'><beginfold id='30'>/</beginfold id='30'>foo<endfold id='30'>/igs</endfold id='30'>;
$var =~ s<beginfold id='29'>!</beginfold id='29'>bla<endfold id='29'></endfold id='29'><beginfold id='30'>!</beginfold id='30'>foo<endfold id='30'>!igs</endfold id='30'>;
$var =~ s<beginfold id='29'>#</beginfold id='29'>bla<endfold id='29'></endfold id='29'><beginfold id='30'>#</beginfold id='30'>foo<endfold id='30'>#igs</endfold id='30'>;
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## PHP

<beginfold id='8'>```php</beginfold id='8'>
namespace Application\Controller;

use Zend\Mvc\Controller\AbstractActionController;

class IndexController extends AbstractActionController
<beginfold id='31'>{</beginfold id='31'>
<endfold id='31'>}</endfold id='31'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Python

<beginfold id='8'>```python</beginfold id='8'>
def addXToY<beginfold id='32'>(</beginfold id='32'>x, y<endfold id='32'>)</endfold id='32'>:
    total = x + y
    print total
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## QML

<beginfold id='8'>```qml</beginfold id='8'>
Text <beginfold id='33'>{</beginfold id='33'>
    id: hello
    width: 100
    text: "Hello world!"
<endfold id='33'>}</endfold id='33'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## R

<beginfold id='8'>```r</beginfold id='8'>
# Declare function “f” with parameters “x”, “y“
# that returns a linear combination of x and y.
f <- function(x, y) <beginfold id='34'>{</beginfold id='34'>
  z <- 3 * x + 4 * y
  return(z)
<endfold id='34'>}</endfold id='34'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Raku

<beginfold id='8'>```raku</beginfold id='8'>
grammar Parser <beginfold id='35'>{</beginfold id='35'>
    rule  TOP  <beginfold id='36'>{</beginfold id='36'> I <love> <lang> <endfold id='36'>}</endfold id='36'>
    token love <beginfold id='36'>{</beginfold id='36'> '♥' | love <endfold id='36'>}</endfold id='36'>
    token lang <beginfold id='36'>{</beginfold id='36'> < Raku Perl Rust Go Python Ruby > <endfold id='36'>}</endfold id='36'>
<endfold id='35'>}</endfold id='35'>

say Parser.parse: 'I ♥ Raku';

say 1 #`<beginfold id='37'>«««</beginfold id='37'> blah TODO blah
here? <endfold id='37'>»»»</endfold id='37'> 2 ;
say 1 #` ( blah TODO blah
2 ;
rx<beginfold id='36'>-</beginfold id='36'> regex <endfold id='36'>-</endfold id='36'>
```

## Ruby

```ruby
require 'Config'
  def CGI::escape<beginfold id='35'>(</beginfold id='35'>string<endfold id='35'>)</endfold id='35'>
    string.gsub<beginfold id='35'>(</beginfold id='35'><beginfold id='36'>/</beginfold id='36'><beginfold id='35'>(</beginfold id='35'><beginfold id='35'>[</beginfold id='35'>^ a-zA-Z0-9_.-<endfold id='35'>]</endfold id='35'>+<endfold id='35'>)</endfold id='35'><endfold id='36'>/</endfold id='36'>n<endfold id='35'>)</endfold id='35'> do
      '%' + $1.unpack<beginfold id='35'>(</beginfold id='35'>'H2' * $1.size<endfold id='35'>)</endfold id='35'>.join<beginfold id='35'>(</beginfold id='35'>'%'<endfold id='35'>)</endfold id='35'>.upcase
    end.tr<beginfold id='35'>(</beginfold id='35'>' ', '+'<endfold id='35'>)</endfold id='35'>
  end
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Rust

<beginfold id='8'>```rust</beginfold id='8'>
fn main() <beginfold id='38'>{</beginfold id='38'>
    println!("Hello world!");
<endfold id='38'>}</endfold id='38'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## MySQL

<beginfold id='8'>```mysql</beginfold id='8'>
-- comment
CREATE TABLE stuff COLUMNS(col1 INT, col2 Varchar);
SELECT * FROM stuff WHERE id = 'string';
select * from stuff where id < 0.42;
Select col1, col2 From stuff Where stuff.col1 IS NOT NuLL;
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Nim

<beginfold id='8'>```nim</beginfold id='8'>
proc main() =
    echo <beginfold id='39'>"</beginfold id='39'>Hello world!<endfold id='39'>"</endfold id='39'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## TypeScript

<beginfold id='8'>```ts</beginfold id='8'>
class Student <beginfold id='40'>{</beginfold id='40'>
    fullName: string;
    constructor(public firstName: string, public middleInitial: string, public lastName: string) <beginfold id='40'>{</beginfold id='40'>
        this.fullName = firstName + " " + middleInitial + " " + lastName;
    <endfold id='40'>}</endfold id='40'>
<endfold id='40'>}</endfold id='40'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## XML

<beginfold id='8'>```xml</beginfold id='8'>
<beginfold id='41'><</beginfold id='41'>tag attribute="3">
  <beginfold id='41'><</beginfold id='41'>nested<endfold id='41'>/></endfold id='41'>
</tag<endfold id='41'>></endfold id='41'>
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## reStructuredText

<beginfold id='8'>```rst</beginfold id='8'>
Section Header
==============

.. image:: /path/to/image.jpg

- A bullet list item
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Doxygen

<beginfold id='8'>```doxygen</beginfold id='8'>
a normal member taking two arguments and returning an integer value.
@param a an integer argument.
@param s a constant character pointer.
@see Javadoc_Test()
@see publicVar()
@return The test results
<endfold id='8'>```</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## No language specified

<beginfold id='8'>```</beginfold id='8'>
No language is specified, but it should be still rendered as code block.
<endfold id='8'>```</endfold id='8'>

<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># Fenced code blocks with more than 3 backticks or tildes

<beginfold id='8'>~~~</beginfold id='8'>
Fenced code block with 3 tildes.
<endfold id='8'>~~~</endfold id='8'>

<beginfold id='8'>`````````</beginfold id='8'>
Some implementations of Markdown/MultiMarkdown support more than 3 backticks or tildes.
```
The block ends with the same amount of backticks.
<endfold id='8'>`````````</endfold id='8'>

<beginfold id='8'>~~~~~~~~~~~~</beginfold id='8'>
Fenced code block with more tildes.
<endfold id='8'>~~~~~~~~~~~~</endfold id='8'>

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## With languages

<beginfold id='8'>```````html</beginfold id='8'>
<html>
  <body>
    <p class="main">Hello world!</p>
  </body>
</html>
``` <beginfold id='42'><!--</beginfold id='42'> <= doesn't end here <endfold id='42'>--></endfold id='42'>
<endfold id='8'>```````</endfold id='8'>

<beginfold id='8'>~~~bash</beginfold id='8'>
for f in *; <beginfold id='12'>do</beginfold id='12'>
    echo "$f"
<endfold id='12'>done</endfold id='12'>
<endfold id='8'>~~~</endfold id='8'>

<beginfold id='8'>~~~~~~~~~python</beginfold id='8'>
def addXToY<beginfold id='32'>(</beginfold id='32'>x, y<endfold id='32'>)</endfold id='32'>:
    total = x + y
    print total
~~~ # <= doesn't end here
<endfold id='8'>~~~~~~~~~</endfold id='8'>

<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># Italic and bold text

**b** *i* __b__ _i_
***ib*** ___ib___
**_ib_** __*ib*__

* _italic_ **bold** ***ib*** ~~strikeout~~

> _italic_ **bold** ***ib*** ~~strikeout~~

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Bold
**bold*___text** normal
__bold_***text__ normal

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Italic
*italic _ text* normal
_italic * text_ normal

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Italic-Bold
***italic-bold ** italic-bold*** normal
***bold-italic text **bold-italic text*** normal
***bold*italic*** normal
**_bold-italic text_** normal

<beginfold id='11'><!--</beginfold id='11'> A non-space character is required after or before * or _ <endfold id='11'>--></endfold id='11'>
_ normal text_ * normal text *
*italic text*normal text*
*italic text *italic text*
**bold text**normal text**
**bold text **bold text**

<beginfold id='11'><!--</beginfold id='11'> A delimiter is required after or before _ <endfold id='11'>--></endfold id='11'>
aaa**bold text**aaaaa
aaa__normal text__aaaaa
пристаням_стремятся_

<beginfold id='11'><!--</beginfold id='11'> Escapes within bold or italic text <endfold id='11'>--></endfold id='11'>
\*normal text*
_normal text\_
**italic text\**
***only bold\***
**bold\** bold**

<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## Highlight

==very important words== normal
==very=important=words== normal

<beginfold id='11'><!--</beginfold id='11'> Folding regions for nested headers should also be closed when the parent header is closed <endfold id='11'>--></endfold id='11'>
<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># 1
<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## 2
<endfold id='4'></endfold id='4'><beginfold id='4'></beginfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>### 3
<endfold id='5'></endfold id='5'><beginfold id='5'></beginfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>#### 4
<endfold id='6'></endfold id='6'><beginfold id='6'></beginfold id='6'><endfold id='7'></endfold id='7'>##### 5
<endfold id='7'></endfold id='7'><beginfold id='7'>###### 6</beginfold id='7'>
<endfold id='2'></endfold id='2'><beginfold id='2'></beginfold id='2'><endfold id='3'></endfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'># 11; 1-6 should close here
<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## 22
<endfold id='4'></endfold id='4'><beginfold id='4'></beginfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>###  33
<endfold id='3'></endfold id='3'><beginfold id='3'></beginfold id='3'><endfold id='4'></endfold id='4'><endfold id='5'></endfold id='5'><endfold id='6'></endfold id='6'><endfold id='7'></endfold id='7'>## 222; 22 and 33 should close here
