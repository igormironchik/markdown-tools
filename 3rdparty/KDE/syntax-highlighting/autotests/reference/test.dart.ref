<Keyword>import</Keyword><Normal Text> </Normal Text><String>'dart:io'</String><Normal Text> </Normal Text><Keyword>show</Keyword><Normal Text> File;</Normal Text><br/>
<Comment>/**</Comment><br/>
<Comment> * print a number</Comment><br/>
<Comment> * "helo"</Comment><br/>
<Comment> * 'string'</Comment><br/>
<Comment> */</Comment><br/>
<Normal Text></Normal Text><br/>
<Modifiers>const</Modifiers><Normal Text> </Normal Text><Data Type>List</Data Type><Symbol><</Symbol><Data Type>int</Data Type><Symbol>></Symbol><Normal Text> list </Normal Text><Symbol>=</Symbol><Normal Text> [</Normal Text><Decimal>1</Decimal><Normal Text>];</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Data Type>String</Data Type><Normal Text> s </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>'''</String><br/>
<String>Multline string single quote</String><br/>
<String>'''</String><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Data Type>String</Data Type><Normal Text> d </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>'''</String><br/>
<String>Multline string double quote</String><br/>
<String>'''</String><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Keyword>enum</Keyword><Normal Text> Enum </Normal Text><Symbol>{</Symbol><Normal Text> one</Normal Text><Symbol>,</Symbol><Normal Text> two </Normal Text><Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>class</Keyword><Normal Text> SimpleClass </Normal Text><Symbol>{}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>abstract</Keyword><Normal Text> </Normal Text><Keyword>class</Keyword><Normal Text> Interface </Normal Text><Keyword>extends</Keyword><Normal Text> SimpleClass </Normal Text><Symbol>{}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Modifiers>final</Modifiers><Normal Text> </Normal Text><Keyword>class</Keyword><Normal Text> Dummy </Normal Text><Symbol>{}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Data Type>Stream</Data Type><Symbol><</Symbol><Data Type>int</Data Type><Symbol>></Symbol><Normal Text> gen() </Normal Text><Modifiers>async</Modifiers><Symbol>*</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>  </Normal Text><Control Flow>for</Control Flow><Normal Text> (</Normal Text><Data Type>int</Data Type><Normal Text> i </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Normal Text>; i </Normal Text><Symbol><</Symbol><Normal Text> </Normal Text><Decimal>100</Decimal><Normal Text>; </Normal Text><Symbol>++</Symbol><Normal Text>i) </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Keyword>yield</Keyword><Normal Text> </Normal Text><Control Flow>switch</Control Flow><Normal Text> (i) </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>      </Normal Text><Decimal>1</Decimal><Normal Text> </Normal Text><Symbol>=></Symbol><Normal Text> </Normal Text><Decimal>1</Decimal><Symbol>,</Symbol><br/>
<Normal Text>      _ </Normal Text><Symbol>=></Symbol><Normal Text> </Normal Text><Control Flow>throw</Control Flow><Normal Text> </Normal Text><String>"Invalid"</String><Symbol>,</Symbol><br/>
<Normal Text>    </Normal Text><Symbol>}</Symbol><Normal Text>;</Normal Text><br/>
<Normal Text>    </Normal Text><Keyword>yield</Keyword><Normal Text> i;</Normal Text><br/>
<Normal Text>  </Normal Text><Symbol>}</Symbol><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Data Type>Future</Data Type><Symbol><</Symbol><Data Type>int</Data Type><Symbol>></Symbol><Normal Text> printNum(</Normal Text><Data Type>int</Data Type><Normal Text> anum) </Normal Text><Modifiers>async</Modifiers><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>  print(</Normal Text><String>"This is a $anum</String><String Char>\n</String Char><String>"</String><Normal Text>);</Normal Text><br/>
<Normal Text>  print(</Normal Text><String>'This is a $anum</String><String Char>\n</String Char><String> </String><String Char>\'</String Char><String>world</String><String Char>\'</String Char><String>'</String><Normal Text>);</Normal Text><br/>
<Normal Text>  </Normal Text><Control Flow>if</Control Flow><Normal Text> (anum </Normal Text><Symbol>==</Symbol><Normal Text> </Normal Text><Decimal>1</Decimal><Normal Text>) </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Control Flow>switch</Control Flow><Normal Text> (anum) </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>      </Normal Text><Control Flow>case</Control Flow><Normal Text> </Normal Text><Decimal>1</Decimal><Symbol>:</Symbol><br/>
<Normal Text>        </Normal Text><Keyword>return</Keyword><Normal Text> </Normal Text><Decimal>3</Decimal><Normal Text>;</Normal Text><br/>
<Normal Text>      </Normal Text><Control Flow>default</Control Flow><Symbol>:</Symbol><br/>
<Normal Text>        </Normal Text><Comment>// do while</Comment><br/>
<Normal Text>        </Normal Text><Control Flow>do</Control Flow><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>          anum</Normal Text><Symbol>--</Symbol><Normal Text>;</Normal Text><br/>
<Normal Text>        </Normal Text><Symbol>}</Symbol><Normal Text> </Normal Text><Control Flow>while</Control Flow><Normal Text> (anum </Normal Text><Symbol><</Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Normal Text>);</Normal Text><br/>
<Normal Text>        </Normal Text><Comment>// while</Comment><br/>
<Normal Text>        </Normal Text><Control Flow>while</Control Flow><Normal Text> (anum </Normal Text><Symbol>></Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Normal Text>) </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>          anum</Normal Text><Symbol>--</Symbol><Normal Text>;</Normal Text><br/>
<Normal Text>        </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>        </Normal Text><Control Flow>break</Control Flow><Normal Text>;</Normal Text><br/>
<Normal Text>    </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>    </Normal Text><Keyword>return</Keyword><Normal Text> </Normal Text><Decimal>1</Decimal><Normal Text>;</Normal Text><br/>
<Normal Text>  </Normal Text><Symbol>}</Symbol><Normal Text> </Normal Text><Control Flow>else</Control Flow><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Keyword>return</Keyword><Normal Text> </Normal Text><Decimal>2</Decimal><Normal Text>;</Normal Text><br/>
<Normal Text>  </Normal Text><Symbol>}</Symbol><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// What are you doing?</Comment><br/>
<Data Type>void</Data Type><Normal Text> main() </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>  </Normal Text><Modifiers>final</Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> nn </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>10</Decimal><Normal Text>;</Normal Text><br/>
<Normal Text>  </Normal Text><Data Type>double</Data Type><Normal Text> dd </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>1.5</Float><Normal Text>;</Normal Text><br/>
<Normal Text>  </Normal Text><Data Type>double</Data Type><Normal Text> de </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Data Type>double</Data Type><Symbol>.</Symbol><Normal Text>nan;</Normal Text><br/>
<Normal Text>  </Normal Text><Data Type>bool</Data Type><Normal Text> boolean </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Constant>true</Constant><Normal Text>;</Normal Text><br/>
<Normal Text>  printNum(nn);</Normal Text><br/>
<Symbol>}</Symbol><br/>
