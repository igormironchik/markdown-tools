<Comment># Test file for Julia</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment># Comment</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>#= Multi-line</Comment><br/>
<Comment>   comment =#</Comment><br/>
<Normal Text></Normal Text><br/>
<FoldingComment>#BEGIN</FoldingComment><br/>
<Normal Text></Normal Text><br/>
<FoldingComment>#END</FoldingComment><br/>
<Normal Text></Normal Text><br/>
<Import>using</Import><Normal Text> </Normal Text><Module>Random</Module><Normal Text>, </Normal Text><Module>LinearAlgebra</Module><br/>
<Variable>x</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Float>1</Float><Normal Text> </Normal Text><Operator>+</Operator><Normal Text> </Normal Text><Float>1</Float><br/>
<Import>using</Import><Normal Text> </Normal Text><Module>DataFrames</Module><Normal Text>, </Normal Text><Module>Tables</Module><Normal Text>,   </Normal Text><br/>
<Normal Text>    </Normal Text><Module>HDF5</Module><Normal Text>, </Normal Text><Comment># this is a comment</Comment><br/>
<Normal Text>    </Normal Text><Module>Plots</Module><br/>
<Import>using</Import><Normal Text> </Normal Text><Module>DataFrames</Module><Normal Text>, </Normal Text><Module>Tables</Module><Normal Text>,</Normal Text><br/>
<Normal Text>    </Normal Text><br/>
<Normal Text>    </Normal Text><Comment># this is a comment</Comment><br/>
<Normal Text>    </Normal Text><Module>Plots</Module><br/>
<Variable>x</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Variable>x</Variable><Normal Text> </Normal Text><Operator>Â±</Operator><Normal Text> </Normal Text><Float>2</Float><br/>
<Import>using</Import><Normal Text> </Normal Text><Module>SparseArrays</Module><Normal Text>: SparseMatrixCSC</Normal Text><br/>
<Import>using</Import><Normal Text> </Normal Text><Module>Sockets</Module><Normal Text>: Sockets, connect,</Normal Text><br/>
<Normal Text>    listen,</Normal Text><br/>
<Normal Text>    getaddrinfo</Normal Text><br/>
<Variable>x</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Variable>x</Variable><Operator>^</Operator><Float>3</Float><br/>
<Import>using</Import><Normal Text> </Normal Text><Module>Statistics</Module><Normal Text>:</Normal Text><br/>
<Normal Text>    std,</Normal Text><br/>
<Normal Text>    stdm</Normal Text><br/>
<Normal Text></Normal Text><br/>
<String>"""</String><br/>
<String> Multi-line string</String><br/>
<String>"""</String><br/>
<Command String>```</Command String><br/>
<Command String> Multi-line command</Command String><br/>
<Command String>```</Command String><br/>
<String>raw"string\a\\a"</String><br/>
<Normal Text></Normal Text><br/>
<String>"string </String><String Char>$</String Char><Variable>testvar</Variable><String> interpolation"</String><br/>
<String>"string \$testvar interpolation"</String><br/>
<String>"string </String><String Char>$</String Char><Normal Text>(</Normal Text><Function>collect</Function><Normal Text>(</Normal Text><Float>1</Float><Operator>:</Operator><Float>10</Float><Normal Text>) </Normal Text><Operator>.^</Operator><Normal Text> </Normal Text><Float>3</Float><Normal Text>)</Normal Text><String> interpolation"</String><br/>
<String>"string \$(collect(1:10) .^ 3) interpolation"</String><br/>
<Normal Text></Normal Text><br/>
<Keyword>let</Keyword><Normal Text> </Normal Text><Variable>z</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Function>zip</Function><Normal Text>(</Normal Text><Float>1</Float><Operator>:</Operator><Float>2</Float><Normal Text>, </Normal Text><Float>3</Float><Operator>:</Operator><Float>4</Float><Normal Text>, </Normal Text><Float>5</Float><Operator>:</Operator><Float>6</Float><Normal Text>)</Normal Text><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>size</Function><Normal Text>(</Normal Text><Variable>z</Variable><Normal Text>) </Normal Text><Operator>==</Operator><Normal Text> (</Normal Text><Float>2</Float><Normal Text>,)</Normal Text><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>collect</Function><Normal Text>(</Normal Text><Variable>z</Variable><Normal Text>) </Normal Text><Operator>==</Operator><Normal Text> [(</Normal Text><Float>1</Float><Normal Text>,</Normal Text><Float>3</Float><Normal Text>,</Normal Text><Float>5</Float><Normal Text>), (</Normal Text><Float>2</Float><Normal Text>,</Normal Text><Float>4</Float><Normal Text>,</Normal Text><Float>6</Float><Normal Text>)]</Normal Text><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>eltype</Function><Normal Text>(</Normal Text><Variable>z</Variable><Normal Text>) </Normal Text><Operator>==</Operator><Normal Text> </Normal Text><Data Type>Tuple</Data Type><Normal Text>{</Normal Text><Data Type>Int</Data Type><Normal Text>,</Normal Text><Data Type>Int</Data Type><Normal Text>,</Normal Text><Data Type>Int</Data Type><Normal Text>}</Normal Text><br/>
<Keyword>end</Keyword><br/>
<Normal Text></Normal Text><br/>
<Macro>@testset</Macro><Normal Text> </Normal Text><String>"generic conversion from Integer"</String><Normal Text> </Normal Text><Control Flow>begin</Control Flow><br/>
<Normal Text>    </Normal Text><Variable>x</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Function>rand</Function><Normal Text>(</Normal Text><Data Type>Int128</Data Type><Normal Text>)</Normal Text><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>BigInt</Function><Normal Text>(</Normal Text><Variable>x</Variable><Normal Text>) </Normal Text><Operator>%</Operator><Normal Text> </Normal Text><Data Type>Int128</Data Type><Normal Text> </Normal Text><Operator>===</Operator><Normal Text> </Normal Text><Variable>x</Variable><br/>
<Normal Text>    </Normal Text><Variable>y</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Function>rand</Function><Normal Text>(</Normal Text><Data Type>UInt128</Data Type><Normal Text>)</Normal Text><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>BigInt</Function><Normal Text>(</Normal Text><Variable>y</Variable><Normal Text>) </Normal Text><Operator>%</Operator><Normal Text> </Normal Text><Data Type>UInt128</Data Type><Normal Text> </Normal Text><Operator>===</Operator><Normal Text> </Normal Text><Variable>y</Variable><br/>
<Control Flow>end</Control Flow><br/>
<Normal Text></Normal Text><br/>
<Macro>@testset</Macro><Normal Text> </Normal Text><String>"show"</String><Normal Text> </Normal Text><Control Flow>begin</Control Flow><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>sprint</Function><Normal Text>(</Normal Text><Variable>show</Variable><Normal Text>, </Normal Text><Function>BitSet</Function><Normal Text>()) </Normal Text><Operator>==</Operator><Normal Text> </Normal Text><String>"BitSet([])"</String><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>sprint</Function><Normal Text>(</Normal Text><Variable>show</Variable><Normal Text>, </Normal Text><Function>BitSet</Function><Normal Text>([</Normal Text><Float>1</Float><Normal Text>,</Normal Text><Float>2</Float><Normal Text>,</Normal Text><Float>3</Float><Normal Text>])) </Normal Text><Operator>==</Operator><Normal Text> </Normal Text><String>"BitSet([1, 2, 3])"</String><br/>
<Normal Text>    </Normal Text><Function>show</Function><Normal Text>(</Normal Text><Function>IOBuffer</Function><Normal Text>(), </Normal Text><Function>BitSet</Function><Normal Text>())</Normal Text><br/>
<Control Flow>end</Control Flow><br/>
<Normal Text></Normal Text><br/>
<Variable>cmd</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Command String>`$(Base.julia_cmd()) --depwarn=error --startup-file=no boundscheck_exec.jl`</Command String><br/>
<Control Flow>if</Control Flow><Normal Text> !</Normal Text><Function>success</Function><Normal Text>(</Normal Text><Function>pipeline</Function><Normal Text>(</Normal Text><Variable>cmd</Variable><Normal Text>; </Normal Text><Constant>stdout</Constant><Operator>=</Operator><Constant>stdout</Constant><Normal Text>, </Normal Text><Constant>stderr</Constant><Operator>=</Operator><Constant>stderr</Constant><Normal Text>))</Normal Text><br/>
<Normal Text>    </Normal Text><Function>error</Function><Normal Text>(</Normal Text><String>"boundscheck test failed, cmd : </String><String Char>$</String Char><Variable>cmd</Variable><String>"</String><Normal Text>)</Normal Text><br/>
<Control Flow>end</Control Flow><br/>
<Normal Text></Normal Text><br/>
<Macro>@test</Macro><Normal Text> </Normal Text><Function>iterate</Function><Normal Text>(</Normal Text><Variable>I</Variable><Normal Text>, </Normal Text><Function>CartesianIndex</Function><Normal Text>(</Normal Text><Float>3</Float><Normal Text>, </Normal Text><Function>typemax</Function><Normal Text>(</Normal Text><Data Type>Int</Data Type><Normal Text>)))[</Normal Text><Float>1</Float><Normal Text>] </Normal Text><Operator>==</Operator><Normal Text> </Normal Text><Function>CartesianIndex</Function><Normal Text>(</Normal Text><Float>4</Float><Normal Text>,</Normal Text><Function>typemax</Function><Normal Text>(</Normal Text><Data Type>Int</Data Type><Normal Text>))</Normal Text><br/>
<Macro>@test</Macro><Normal Text> </Normal Text><Function>iterate</Function><Normal Text>(</Normal Text><Variable>I</Variable><Normal Text>, </Normal Text><Function>CartesianIndex</Function><Normal Text>(</Normal Text><Float>4</Float><Normal Text>, </Normal Text><Function>typemax</Function><Normal Text>(</Normal Text><Data Type>Int</Data Type><Normal Text>)))    </Normal Text><Operator>===</Operator><Normal Text> </Normal Text><Constant>nothing</Constant><br/>
<Macro>@test_throws</Macro><Normal Text> </Normal Text><Data Type>MethodError</Data Type><Normal Text> </Normal Text><Function>write</Function><Normal Text>(</Normal Text><Function>IOBuffer</Function><Normal Text>(), </Normal Text><Function>ASCIIChar</Function><Normal Text>(</Normal Text><Char>'x'</Char><Normal Text>))</Normal Text><br/>
<Macro>@test_throws</Macro><Normal Text> </Normal Text><Data Type>MethodError</Data Type><Normal Text> </Normal Text><Function>read</Function><Normal Text>(</Normal Text><Function>IOBuffer</Function><Normal Text>(</Normal Text><Char>'x'</Char><Normal Text>), </Normal Text><Variable>ASCIIChar</Variable><Normal Text>)</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Keyword>let</Keyword><Normal Text> </Normal Text><Variable>header</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><String>"julia [switches] -- [programfile] [args...]"</String><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>startswith</Function><Normal Text>(</Normal Text><Function>read</Function><Normal Text>(</Normal Text><Command String>`$exename -h`</Command String><Normal Text>, </Normal Text><Data Type>String</Data Type><Normal Text>), </Normal Text><Variable>header</Variable><Normal Text>)</Normal Text><br/>
<Normal Text>    </Normal Text><Macro>@test</Macro><Normal Text> </Normal Text><Function>startswith</Function><Normal Text>(</Normal Text><Function>read</Function><Normal Text>(</Normal Text><Command String>`$exename --help`</Command String><Normal Text>, </Normal Text><Data Type>String</Data Type><Normal Text>), </Normal Text><Variable>header</Variable><Normal Text>)</Normal Text><br/>
<Keyword>end</Keyword><br/>
<Normal Text></Normal Text><br/>
<Macro>@test</Macro><Normal Text> </Normal Text><Function>isequal</Function><Normal Text>(</Normal Text><Function>exp</Function><Normal Text>(</Normal Text><Function>complex</Function><Normal Text>( </Normal Text><Constant>Inf</Constant><Normal Text>, </Normal Text><Constant>NaN</Constant><Normal Text>)), </Normal Text><Function>complex</Function><Normal Text>(</Normal Text><Operator>-</Operator><Constant>Inf</Constant><Normal Text>, </Normal Text><Constant>NaN</Constant><Normal Text>))</Normal Text><br/>
<Macro>@test</Macro><Normal Text> </Normal Text><Function>isequal</Function><Normal Text>(</Normal Text><Function>exp</Function><Normal Text>(</Normal Text><Function>complex</Function><Normal Text>( </Normal Text><Constant>Inf</Constant><Normal Text>, </Normal Text><Constant>Inf</Constant><Normal Text>)), </Normal Text><Function>complex</Function><Normal Text>(</Normal Text><Operator>-</Operator><Constant>Inf</Constant><Normal Text>, </Normal Text><Constant>NaN</Constant><Normal Text>))</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Comment># Numbers</Comment><br/>
<Binary>0b10</Binary><br/>
<Octal>0o01_70</Octal><br/>
<Hex>0x00000000000000001111_22_2233334444</Hex><br/>
<Operator>-</Operator><Hex>0x0002im</Hex><br/>
<Float>1.0e10</Float><br/>
<Float>0.00025f0</Float><br/>
<Operator>-</Operator><Float>1.5_5f0</Float><br/>
<Hex>0xdeadbeefim</Hex><br/>
<Float>0x1.8p3</Float><br/>
<Float>0x.4p-1</Float><br/>
<Comment># Invalid number</Comment><br/>
<Hex>0x000</Hex><Variable>__22</Variable><br/>
<Normal Text></Normal Text><br/>
<Variable>chars</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> [</Normal Text><Char>'0'</Char><Normal Text>, </Normal Text><Char>'1'</Char><Normal Text>, </Normal Text><Char>'2'</Char><Normal Text>, </Normal Text><Char>'3'</Char><Normal Text>, </Normal Text><Char>'a'</Char><Normal Text>, </Normal Text><Char>'b'</Char><Normal Text>, </Normal Text><Char>'c'</Char><Normal Text>, </Normal Text><Char>'d'</Char><Normal Text>, </Normal Text><Char>'e'</Char><Normal Text>, </Normal Text><Char>'X'</Char><Normal Text>, </Normal Text><Char>'Y'</Char><Normal Text>, </Normal Text><Char>'Z'</Char><Normal Text>,</Normal Text><br/>
<Normal Text>         </Normal Text><Char>'ð '</Char><Normal Text>, </Normal Text><Char>'ð '</Char><Normal Text>, </Normal Text><Char>'ð '</Char><Normal Text>, </Normal Text><Char>'ð '</Char><Normal Text>, </Normal Text><Char>'ð¡'</Char><Normal Text>, </Normal Text><Char>'ð¢'</Char><Normal Text>, </Normal Text><Char>'ð£'</Char><Normal Text>, </Normal Text><Char>'ð®'</Char><Normal Text>]</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Macro>@test</Macro><Normal Text> </Normal Text><Function>docstrings_equal</Function><Normal Text>(</Normal Text><Macro>@doc</Macro><Normal Text>(</Normal Text><Variable>ModuleMacroDoc</Variable><Normal Text>), </Normal Text><String>doc"I am a module"</String><Normal Text>)</Normal Text><br/>
<Function>match</Function><Normal Text>(</Normal Text><String>r"^</String><String Char>\s*</String Char><Char>(?</Char><String>:#</String><Char>|</Char><String Char>$</String Char><String>)", "# </String><Variable>a</Variable><String> comment"</String><Normal Text>)</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Keyword>abstract type</Keyword><Normal Text> </Normal Text><Variable>Test2</Variable><Normal Text> </Normal Text><Keyword>end</Keyword><br/>
<Normal Text></Normal Text><br/>
<Keyword>function</Keyword><Normal Text> </Normal Text><Function>âabcâdef</Function><Normal Text>(</Normal Text><Variable>a</Variable><Operator>::</Operator><Data Type>Int</Data Type><Normal Text>,</Normal Text><br/>
<Normal Text>                 </Normal Text><Variable>b</Variable><Operator>::</Operator><Data Type> Int</Data Type><Normal Text>,</Normal Text><br/>
<Normal Text>                 </Normal Text><Variable>c</Variable><Operator>::</Operator><Data Type>Dict{String, Int}</Data Type><Normal Text>,</Normal Text><br/>
<Normal Text>                 </Normal Text><Variable>d</Variable><Operator>::</Operator><Data Type> Dict{String, Vector{eltype(var1)}}</Data Type><Normal Text>,</Normal Text><br/>
<Normal Text>                 </Normal Text><Variable>f</Variable><Operator>::</Operator><Data Type>AbstractVector{<:Number}</Data Type><Normal Text>,</Normal Text><br/>
<Normal Text>                 </Normal Text><Variable>g</Variable><Operator>::</Operator><Data Type>T</Data Type><Normal Text>,</Normal Text><br/>
<Normal Text>                 </Normal Text><Variable>h</Variable><Operator>::</Operator><Data Type>T</Data Type><Normal Text>) </Normal Text><Keyword>where</Keyword><Normal Text> {</Normal Text><Variable>T</Variable><Normal Text> </Normal Text><Operator><:</Operator><Data Type> Number</Data Type><Normal Text>}</Normal Text><br/>
<Normal Text>    </Normal Text><Variable>x</Variable><Operator>::</Operator><Data Type>Int</Data Type><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Float>1</Float><br/>
<Normal Text>    </Normal Text><Variable>z</Variable><Normal Text> </Normal Text><Operator>=</Operator><Normal Text> </Normal Text><Function>collect</Function><Normal Text>(</Normal Text><Float>1</Float><Operator>:</Operator><Float>10</Float><Normal Text>)</Normal Text><br/>
<Normal Text>    </Normal Text><Control Flow>return</Control Flow><Normal Text> </Normal Text><Variable>z</Variable><Normal Text>[</Normal Text><Float>3</Float><Operator>:</Operator><Keyword>end</Keyword><Normal Text>] </Normal Text><Operator>.+</Operator><Normal Text> </Normal Text><Variable>x</Variable><Normal Text> </Normal Text><Operator>.-</Operator><Normal Text> </Normal Text><Variable>a</Variable><br/>
<Keyword>end</Keyword><br/>
<Normal Text></Normal Text><br/>
<Keyword>mutable struct</Keyword><Normal Text> </Normal Text><Variable>TestType</Variable><Normal Text> </Normal Text><Operator><:</Operator><Data Type> AbstractVector{Number}</Data Type><br/>
<Normal Text>    </Normal Text><Variable>field1</Variable><Operator>::</Operator><Data Type>Int</Data Type><br/>
<Normal Text>    â</Normal Text><Variable>field2</Variable><Operator>::</Operator><Data Type>Vector</Data Type><br/>
<Keyword>end</Keyword><br/>
<Normal Text></Normal Text><br/>
<Keyword>struct</Keyword><Normal Text> </Normal Text><Variable>ParametricType</Variable><Normal Text>{</Normal Text><Variable>T</Variable><Normal Text>, </Normal Text><Variable>V</Variable><Normal Text> </Normal Text><Operator><:</Operator><Data Type> Tuple</Data Type><Normal Text>}</Normal Text><br/>
<Normal Text>    </Normal Text><Variable>field1</Variable><br/>
<Normal Text>    </Normal Text><Variable>field2</Variable><Operator>::</Operator><Data Type>Float</Data Type><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Keyword>function</Keyword><Normal Text> </Normal Text><Function>ParametricType</Function><Data Type>{T, V}</Data Type><Normal Text>(</Normal Text><Variable>r</Variable><Normal Text>, </Normal Text><Variable>d</Variable><Normal Text>) </Normal Text><Keyword>where</Keyword><Normal Text> {</Normal Text><Variable>T</Variable><Normal Text>, </Normal Text><Variable>V</Variable><Normal Text> </Normal Text><Operator><:</Operator><Data Type> Tuple</Data Type><Normal Text>}</Normal Text><br/>
<Normal Text>        </Normal Text><Control Flow>return</Control Flow><Normal Text> </Normal Text><Function>new</Function><Data Type>{T, V}</Data Type><Normal Text>(</Normal Text><Variable>r</Variable><Normal Text>, </Normal Text><Variable>d</Variable><Normal Text>)</Normal Text><br/>
<Normal Text>    </Normal Text><Keyword>end</Keyword><br/>
<Keyword>end</Keyword><br/>
