<Comment>// this is a single-line comment</Comment><br/>
<Comment>// </Comment><Alert Level 3>NOTE</Alert Level 3><Comment> </Comment><Alert Level 3>###</Alert Level 3><Comment> </Comment><Alert Level 2>FIXME</Alert Level 2><Comment> </Comment><Alert Level 2>TODO</Alert Level 2><br/>
<Normal Text></Normal Text><br/>
<Comment>/* this is a</Comment><br/>
<Comment>   multi-line comment</Comment><br/>
<Comment>*/</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>/* this is another</Comment><br/>
<Comment> * multiline comment</Comment><br/>
<Comment> * </Comment><Alert Level 3>NOTE</Alert Level 3><Comment> </Comment><Alert Level 3>###</Alert Level 3><Comment> </Comment><Alert Level 2>FIXME</Alert Level 2><Comment> </Comment><Alert Level 2>TODO</Alert Level 2><br/>
<Comment> */</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>/** this is another</Comment><br/>
<Comment> * multiline comment</Comment><br/>
<Comment> * </Comment><Alert Level 3>NOTE</Alert Level 3><Comment> </Comment><Alert Level 3>###</Alert Level 3><Comment> </Comment><Alert Level 2>FIXME</Alert Level 2><Comment> </Comment><Alert Level 2>TODO</Alert Level 2><br/>
<Comment> */</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>// simple assignment</Comment><br/>
<Data Type>var</Data Type><Normal Text> i </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>5</Decimal><Symbol>;</Symbol><br/>
<Normal Text></Normal Text><br/>
<Data Type>var</Data Type><Normal Text> j </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Comment>// assignment missing, still should be nice highlighting</Comment><br/>
<Data Type>var</Data Type><Normal Text> k   </Normal Text><Comment>// assignment missing, still should be nice highlighting</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>// test a string</Comment><br/>
<Data Type>var</Data Type><Normal Text> s </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>"Hello World!"</String><Symbol>;</Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// arr is an array</Comment><br/>
<Data Type>var</Data Type><Normal Text> arr </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Keyword>new</Keyword><Symbol>[]</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Symbol>,</Symbol><Normal Text> </Normal Text><Decimal>1</Decimal><Symbol>,</Symbol><Normal Text> </Normal Text><Decimal>2</Decimal><Symbol>,</Symbol><Normal Text> </Normal Text><Decimal>3</Decimal><Symbol>,</Symbol><Normal Text> </Normal Text><Decimal>4</Decimal><Normal Text> </Normal Text><Symbol>};</Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// expr is compiled as IEnumerable<Customer></Comment><br/>
<Comment>// or perhaps IQueryable<Customer></Comment><br/>
<Data Type>var</Data Type><Normal Text> expr </Normal Text><Symbol>=</Symbol><br/>
<Normal Text>    from c </Normal Text><Keyword>in</Keyword><Normal Text> customers</Normal Text><br/>
<Normal Text>    where c</Normal Text><Symbol>.</Symbol><Function>City</Function><Normal Text> </Normal Text><Symbol>==</Symbol><Normal Text> </Normal Text><String>"London"</String><br/>
<Normal Text>    select c</Normal Text><Symbol>;</Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// compiled anonymous type</Comment><br/>
<Data Type>var</Data Type><Normal Text> anon </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Keyword>new</Keyword><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> Country </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>"Germany"</String><Symbol>,</Symbol><Normal Text> Inhabitants </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>80000000</Decimal><Normal Text> </Normal Text><Symbol>};</Symbol><br/>
