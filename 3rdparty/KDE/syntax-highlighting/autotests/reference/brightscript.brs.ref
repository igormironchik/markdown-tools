<g></g><br/>
<macro>#i am macro</macro><br/>
<g></g><br/>
<import>library </import><string>"a"</string><br/>
<g></g><br/>
<keyword>function</keyword><g> </g><func>myfunc</func><g> </g><scope>(</scope><g> </g><var>foo</var><g> </g><keyword>as</keyword><g> </g><type>Integer</type><g> </g><coma>,</coma><g> </g><var>bar</var><g> </g><keyword>as</keyword><g> </g><type>Float</type><g> </g><assign>=</assign><g> </g><float>3.5</float><g> </g><scope>)</scope><g> </g><keyword>as</keyword><g> </g><type>Void</type><br/>
<keyword>end function</keyword><br/>
<g></g><br/>
<keyword>sub</keyword><g> </g><func>mysub</func><g> </g><scope>(</scope><g> </g><var>foo</var><g> </g><keyword>as</keyword><g> </g><type>Integer</type><g> </g><coma>,</coma><g> </g><var>bar</var><g> </g><keyword>as</keyword><g> </g><type>Float</type><g> </g><assign>=</assign><g> </g><float>3.5</float><g> </g><scope>)</scope><g> </g><keyword>as</keyword><g> </g><type>Void</type><br/>
<keyword>end sub</keyword><br/>
<g></g><br/>
<comment>' my comment</comment><br/>
<g></g><br/>
<keyword>Function</keyword><g> </g><func>MyCamelCaseFunction</func><scope>()</scope><br/>
<g>    </g><var>lvalue</var><g> </g><assign>=</assign><g> </g><var>rvalue</var><br/>
<var>a</var><assign>=</assign><dec>5</dec><br/>
<var>a</var><assign>=</assign><float>5!</float><br/>
<var>a</var><assign>=</assign><float>5#</float><br/>
<var>a</var><assign>=</assign><dec>5%</dec><br/>
<var>a</var><assign>=</assign><dec>5&</dec><br/>
<g></g><br/>
<var>a$</var><assign>=</assign><dec>5</dec><br/>
<var>a!</var><assign>=</assign><dec>5</dec><br/>
<var>a#</var><assign>=</assign><dec>5</dec><br/>
<var>a%</var><assign>=</assign><dec>5</dec><br/>
<var>a&</var><assign>=</assign><dec>5</dec><br/>
<g></g><br/>
<var>a</var><assign>=</assign><var>a$</var><br/>
<var>a</var><assign>=</assign><var>a!</var><br/>
<var>a</var><assign>=</assign><var>a#</var><br/>
<var>a</var><assign>=</assign><var>a%</var><br/>
<var>a</var><assign>=</assign><var>a&</var><br/>
<g></g><br/>
<func>foo</func><scope>()</scope><br/>
<var>a</var><operator>.</operator><func>foo</func><scope>()</scope><br/>
<var>a</var><assign>=</assign><var>a</var><operator>.</operator><func>foo</func><scope>()</scope><br/>
<g></g><br/>
<invalid>eval</invalid><g>=5</g><br/>
<builtin_func>eval</builtin_func><scope>()</scope><br/>
<var>a</var><operator>.</operator><func>eval</func><scope>()</scope><br/>
<g></g><br/>
<var>a</var><assign>=</assign><invalid>eval</invalid><br/>
<var>a</var><assign>=</assign><builtin_func>eval</builtin_func><scope>()</scope><br/>
<var>a</var><assign>=</assign><var>a</var><operator>.</operator><func>eval</func><scope>()</scope><br/>
<g></g><br/>
<var>sleep</var><assign>=</assign><dec>5</dec><br/>
<library_func>sleep</library_func><scope>()</scope><br/>
<var>a</var><operator>.</operator><func>sleep</func><scope>()</scope><br/>
<g></g><br/>
<var>a</var><assign>=</assign><var>sleep</var><br/>
<var>a</var><assign>=</assign><library_func>sleep</library_func><scope>()</scope><br/>
<var>a</var><assign>=</assign><var>a</var><operator>.</operator><func>sleep</func><scope>()</scope><br/>
<g></g><br/>
<control>if</control><g> </g><var>a</var><binary>=</binary><var>b</var><g> </g><var>c</var><assign>=</assign><var>d</var><br/>
<control>if</control><g> </g><var>a</var><g> </g><func>foo</func><scope>()</scope><br/>
<control>if</control><g> </g><var>a</var><g> </g><control>then</control><g> </g><func>foo</func><scope>()</scope><br/>
<g></g><br/>
<control>if</control><g> </g><var>a</var><br/>
<control>end if</control><br/>
<g></g><br/>
<control>if</control><g> </g><var>a</var><g> </g><control>then</control><br/>
<control>end if</control><br/>
<g></g><br/>
<control>if</control><g> </g><var>a</var><br/>
<control>else</control><g> </g><control>if</control><br/>
<control>else</control><br/>
<control>end if</control><br/>
<g></g><br/>
<control>if</control><g> </g><var>a</var><br/>
<control>elseif</control><br/>
<control>endif</control><br/>
<g></g><br/>
<control>for</control><g> </g><control>each</control><g> </g><var>a</var><g> </g><control>in</control><g> </g><var>b</var><br/>
<control>end for</control><br/>
<g></g><br/>
<control>for</control><g> </g><var>a</var><assign>=</assign><dec>1</dec><g> </g><control>to</control><g> </g><dec>10</dec><g> </g><control>step</control><g> </g><dec>2</dec><br/>
<control>endFor</control><br/>
<g></g><br/>
<control>for</control><g> </g><control>each</control><g> </g><var>a</var><g> </g><control>in</control><g> </g><var>b</var><br/>
<control>next</control><br/>
<g></g><br/>
<control>while</control><g> </g><var>a</var><br/>
<control>end while</control><br/>
<g></g><br/>
<control>while</control><g> </g><var>a</var><br/>
<control>endWhile</control><br/>
<g></g><br/>
<var>a</var><g> </g><operator>[</operator><g> </g><string>"a"</string><g> </g><coma>,</coma><g> </g><dec>1</dec><coma>,</coma><g> </g><func>foo</func><scope>()</scope><g> </g><operator>]</operator><g> </g><assign>=</assign><g> </g><dec>1</dec><br/>
<var>a</var><operator>.</operator><func>foo</func><scope>()</scope><operator>[</operator><dec>1</dec><operator>]</operator><assign>=</assign><dec>1</dec><br/>
<g></g><br/>
<var>a</var><g> </g><assign>=</assign><g> </g><operator>{</operator><br/>
<g>    </g><var>a</var><g> </g><operator>:</operator><g> </g><dec>1</dec><br/>
<g>    </g><var>b</var><g> </g><operator>:</operator><g> </g><string>"2"</string><br/>
<g>    </g><var>c</var><g> </g><operator>:</operator><g> </g><keyword>function</keyword><scope>()</scope><g> </g><line_break>:</line_break><g> </g><keyword>end function</keyword><br/>
<operator>}</operator><br/>
<g></g><br/>
<var>b</var><operator>.</operator><func>foo</func><scope>(</scope><string>"string"</string><coma>,</coma><dec>1</dec><coma>,</coma><operator>{</operator><var>a</var><operator>:</operator><var>b</var><operator>}</operator><coma>,</coma><float>1.5</float><coma>,</coma><operator>[</operator><dec>1</dec><coma>,</coma><dec>2</dec><coma>,</coma><dec>3</dec><operator>]</operator><scope>)</scope><br/>
<var>a</var><g> </g><assign>=</assign><g> </g><var>b</var><operator>.</operator><func>foo</func><scope>(</scope><string>"string"</string><coma>,</coma><dec>1</dec><coma>,</coma><operator>{</operator><var>a</var><operator>:</operator><var>b</var><operator>}</operator><coma>,</coma><float>1.5</float><coma>,</coma><operator>[</operator><dec>1</dec><coma>,</coma><dec>2</dec><coma>,</coma><dec>3</dec><operator>]</operator><scope>)</scope><br/>
<g></g><br/>
<var>unnamed_function</var><g> </g><assign>=</assign><g> </g><keyword>function</keyword><g> </g><scope>(</scope><g> </g><var>a</var><g> </g><keyword>as</keyword><g> </g><type>Integer</type><g> </g><scope>)</scope><g> </g><keyword>as</keyword><g> </g><type>Float</type><br/>
<g></g><br/>
<var>a</var><g> </g><assign>=</assign><g> </g><unary>+-</unary><var>b</var><br/>
<var>a</var><g> </g><assign>=</assign><g> </g><dec>&h42abcdef</dec><br/>
<var>c</var><g> </g><assign>=</assign><g> </g><var>var</var><operator>@</operator><var>attr</var><br/>
<keyword>end function</keyword><br/>
<g></g><br/>
<var>unnamed_sub</var><g> </g><assign>=</assign><g> </g><keyword>sub</keyword><g> </g><scope>(</scope><g> </g><var>a</var><g> </g><keyword>as</keyword><g> </g><type>Integer</type><g> </g><scope>)</scope><g> </g><keyword>as</keyword><g> </g><type>Void</type><br/>
<keyword>end sub</keyword><br/>
<keyword>endFunction</keyword><br/>
<g></g><br/>
<keyword>sub</keyword><g> </g><func>exceptions</func><scope>()</scope><br/>
<g>	</g><var>try</var><assign>=</assign><dec>1</dec><br/>
<g>	</g><func>try</func><scope>()</scope><br/>
<g>	</g><var>try</var><operator>.</operator><var>foo</var><br/>
<g>	</g><var>try</var><g> </g><var>foo</var><br/>
<g></g><br/>
<g>	</g><var>catch</var><assign>=</assign><dec>1</dec><br/>
<g>	</g><func>catch</func><scope>()</scope><br/>
<g>	</g><var>catch</var><operator>.</operator><var>foo</var><br/>
<g>	</g><var>catch</var><g> </g><var>foo</var><br/>
<g></g><br/>
<g>	</g><keyword>try</keyword><br/>
<g>	</g><keyword>catch</keyword><g> </g><var>foo</var><br/>
<g>	</g><keyword>end</keyword><g> </g><keyword>try</keyword><br/>
<g></g><br/>
<g>	</g><keyword>try</keyword><g> </g><comment>' comment</comment><br/>
<g>	</g><keyword>endtry</keyword><br/>
<g></g><br/>
<g>	</g><keyword>throw</keyword><g> </g><operator>{</operator><var>a</var><operator>:</operator><g> </g><string>"abc"</string><operator>}</operator><br/>
<keyword>end sub</keyword><br/>
<g></g><br/>
<keyword>sub</keyword><g> </g><func>inline_lambda</func><scope>()</scope><br/>
<g>	</g><func>a</func><scope>(</scope><var>a</var><coma>,</coma><g> </g><string>"string"</string><scope>)(</scope><var>a</var><coma>,</coma><g> </g><string>"string"</string><scope>)</scope><br/>
<g></g><br/>
<g>	</g><var>a</var><g> </g><assign>=</assign><g> </g><keyword>sub</keyword><scope>()</scope><br/>
<g>	</g><keyword>end sub</keyword><scope>(</scope><var>a</var><coma>,</coma><g> </g><string>"string"</string><coma>,</coma><g> </g><operator>[</operator><var>a</var><coma>,</coma><g> </g><func>foo</func><scope>(</scope><string>"string"</string><scope>)</scope><operator>]</operator><scope>)</scope><br/>
<g></g><br/>
<g>	</g><var>b</var><g> </g><assign>=</assign><g> </g><keyword>function</keyword><scope>()</scope><br/>
<g>	</g><keyword>end function</keyword><scope>(</scope><var>a</var><coma>,</coma><g> </g><string>"string"</string><scope>)</scope><br/>
<g></g><br/>
<g>	</g><var>c</var><g> </g><assign>=</assign><g> </g><keyword>sub</keyword><scope>()</scope><br/>
<g>	</g><keyword>end sub</keyword><br/>
<keyword>end sub</keyword><br/>
