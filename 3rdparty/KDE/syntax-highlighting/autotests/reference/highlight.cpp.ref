<Preprocessor>#pragma once</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib><cassert></Prep. Lib><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib><assert.h></Prep. Lib><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib>"assert.h"</Prep. Lib><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib>"assert.hpp"</Prep. Lib><Preprocessor> </Preprocessor><Comment>// abc</Comment><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib>"path/assert.hpp"</Prep. Lib><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib>"assert.h"</Prep. Lib><Error>a</Error><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib>"assert.h"</Prep. Lib><Preprocessor> </Preprocessor><Error>a</Error><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib><cassert></Prep. Lib><Error>a</Error><br/>
<Preprocessor>#include </Preprocessor><Prep. Lib><cassert></Prep. Lib><Preprocessor> </Preprocessor><Error>a</Error><br/>
<Preprocessor>#include FOO() error</Preprocessor><br/>
<Preprocessor>#include_next </Preprocessor><Prep. Lib><cassert></Prep. Lib><Preprocessor> </Preprocessor><Error>a</Error><br/>
<Preprocessor>#include_next </Preprocessor><Prep. Lib><cassert></Prep. Lib><Preprocessor> </Preprocessor><Comment>/* a</Comment><br/>
<Comment> */</Comment><Preprocessor> </Preprocessor><Error>b</Error><br/>
<Preprocessor>#include PATH_IN_MACRO</Preprocessor><br/>
<Preprocessor>#include PATH_IN_MACRO()</Preprocessor><br/>
<Preprocessor>#include PATH_IN_MACRO(a, b)</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#define SOME_VAR </Preprocessor><Decimal>1</Decimal><br/>
<Preprocessor>#ifdef SOME_VAR</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#define MULTILINE_MACRO one </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>two </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>three</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Preprocessor># define MULTILINE_MACRO_TEXT                        </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    </Preprocessor><Comment>/* </Comment><Alert Level 3>NOTE</Alert Level 3><Comment> The contents of macro is too green :D */</Comment><Preprocessor> </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    </Preprocessor><Data Type>char</Data Type><Preprocessor> </Preprocessor><Type Modifiers>const</Type Modifiers><Preprocessor> s</Preprocessor><Symbol>[]</Symbol><Preprocessor> </Preprocessor><Symbol>=</Symbol><Preprocessor> </Preprocessor><String>"a</String><String Char>\\</String Char><String>b"</String><Preprocessor>                          </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    </Preprocessor><String>"c</String><String Char>\n</String Char><String>d"</String><Preprocessor>                                           </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    </Preprocessor><Standard Classes>std::uint</Standard Classes><Symbol>##</Symbol><Standard Classes>x</Standard Classes><Symbol>##</Symbol><Standard Classes>_t</Standard Classes><Preprocessor>                                 </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    </Preprocessor><Standard Classes>std::vector</Standard Classes><Comment>/**/</Comment><Symbol><</Symbol><Preprocessor>T</Preprocessor><Symbol>></Symbol><Preprocessor>                               </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    </Preprocessor><Standard Classes>std::chrono::</Standard Classes><Comment>/*milli*/</Comment><Standard Classes>seconds</Standard Classes><br/>
<Normal Text></Normal Text><br/>
<Normal Text></Normal Text><br/>
<Preprocessor># define VARIADIC</Preprocessor><Symbol>(</Symbol><Preprocessor>a</Preprocessor><Separator Symbol>,</Separator Symbol><Preprocessor> </Preprocessor><Symbol>...)</Symbol><Preprocessor>          </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    f</Preprocessor><Symbol>(</Symbol><Preprocessor>a</Preprocessor><Symbol>##</Symbol><Preprocessor>a</Preprocessor><Symbol>)</Symbol><Preprocessor>                        </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    f</Preprocessor><Symbol>(</Symbol><Standard Macros>__VA_ARGS__</Standard Macros><Symbol>)</Symbol><Preprocessor>                 </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    f</Preprocessor><Symbol>(#</Symbol><Standard Macros>__VA_ARGS__</Standard Macros><Symbol>)</Symbol><Preprocessor>                </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    f</Preprocessor><Symbol>(</Symbol><Standard Macros>__VA_ARGS__</Standard Macros><Symbol>)</Symbol><Preprocessor>                 </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    f</Preprocessor><Symbol>(</Symbol><Decimal>0</Decimal><Preprocessor> </Preprocessor><Standard Macros>__VA_OPT__</Standard Macros><Symbol>(</Symbol><Separator Symbol>,</Separator Symbol><Symbol>)</Symbol><Preprocessor> </Preprocessor><Standard Macros>__VA_ARGS__</Standard Macros><Symbol>)</Symbol><Preprocessor> </Preprocessor><Separator Symbol>\</Separator Symbol><br/>
<Preprocessor>    x </Preprocessor><Standard Macros>__VA_OPT__</Standard Macros><Symbol>(=</Symbol><Preprocessor> </Preprocessor><Symbol>{</Symbol><Preprocessor> </Preprocessor><Standard Macros>__VA_ARGS__</Standard Macros><Preprocessor> </Preprocessor><Symbol>})</Symbol><br/>
<Normal Text></Normal Text><br/>
<Preprocessor># define MACRO</Preprocessor><Symbol>()</Symbol><Preprocessor> </Preprocessor><CONSTS/MACROS>BAD</CONSTS/MACROS><Preprocessor> </Preprocessor><Error>\</Error><Preprocessor> </Preprocessor><CONSTS/MACROS>ESCAPED</CONSTS/MACROS><br/>
<Normal Text></Normal Text><br/>
<Preprocessor># error dds</Preprocessor><br/>
<Preprocessor># warning dds</Preprocessor><br/>
<Preprocessor># line 2 "file.cpp"</Preprocessor><br/>
<Preprocessor># define A</Preprocessor><Symbol>(</Symbol><Preprocessor>x</Preprocessor><Separator Symbol>,</Separator Symbol><Preprocessor> y</Preprocessor><Symbol>)</Symbol><Preprocessor> x</Preprocessor><Symbol>##</Symbol><Preprocessor>y x</Preprocessor><Symbol>#</Symbol><Preprocessor>y</Preprocessor><br/>
<Comment>// OK(L, a) -> L"a"</Comment><br/>
<Preprocessor># define OK</Preprocessor><Symbol>(</Symbol><Preprocessor>x</Preprocessor><Separator Symbol>,</Separator Symbol><Preprocessor> y</Preprocessor><Symbol>)</Symbol><Preprocessor> x</Preprocessor><Symbol>###</Symbol><Preprocessor>y</Preprocessor><br/>
<Preprocessor># define BAD</Preprocessor><Symbol>(</Symbol><Preprocessor>x</Preprocessor><Separator Symbol>,</Separator Symbol><Preprocessor> y</Preprocessor><Symbol>)</Symbol><Preprocessor> x</Preprocessor><Symbol>####</Symbol><Preprocessor>y</Preprocessor><br/>
<Preprocessor># define A </Preprocessor><Comment>/* multi line</Comment><br/>
<Comment>with comment */</Comment><Preprocessor> expr</Preprocessor><br/>
<Preprocessor># define A </Preprocessor><Comment>/* multi line</Comment><br/>
<Comment>with comment */</Comment><br/>
<Decimal>23</Decimal><br/>
<Preprocessor>#else </Preprocessor><Comment>// x</Comment><br/>
<Preprocessor>#42 </Preprocessor><Comment>// gcc extension = #line 42</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>// error</Comment><br/>
<Preprocessor>#</Preprocessor><Error>wrong</Error><br/>
<Preprocessor># </Preprocessor><Error>wrong</Error><br/>
<Preprocessor>#endif </Preprocessor><Error>x</Error><br/>
<Preprocessor>#if DS()</Preprocessor><br/>
<Preprocessor>#else </Preprocessor><Error>x</Error><br/>
<Preprocessor>#else </Preprocessor><Comment>/* */</Comment><Error>x</Error><br/>
<Preprocessor>#else </Preprocessor><Comment>/* x</Comment><br/>
<Comment>y */</Comment><Preprocessor> </Preprocessor><Error>z</Error><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Comment>// check that _XXX defines work, bug 397766</Comment><br/>
<Preprocessor>#ifndef _HEADER_GUARD</Preprocessor><br/>
<Preprocessor>#define _HEADER_GUARD </Preprocessor><Decimal>1</Decimal><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Preprocessor>#ifdef _HEADER_GUARD</Preprocessor><br/>
<Preprocessor>#if (_HEADER_GUARD >= 1)</Preprocessor><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> </Normal Text><Globals (g_*)>g_global</Globals (g_*)><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>template</Keyword><Symbol><</Symbol><Keyword>class</Keyword><Normal Text> T</Normal Text><Separator Symbol>,</Separator Symbol><Normal Text> </Normal Text><Keyword>typename</Keyword><Normal Text> U</Normal Text><Separator Symbol>,</Separator Symbol><Normal Text> </Normal Text><Keyword>template</Keyword><Symbol><</Symbol><Keyword>class</Keyword><Symbol>></Symbol><Normal Text> </Normal Text><Keyword>class</Keyword><Normal Text> </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Standard Classes>std::is_pointer</Standard Classes><Symbol>></Symbol><br/>
<Keyword>struct</Keyword><Normal Text> class1</Normal Text><br/>
<Normal Text>  </Normal Text><Symbol>:</Symbol><Normal Text> </Normal Text><Keyword>private</Keyword><Normal Text> </Normal Text><Standard Classes>std::vector</Standard Classes><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>,</Separator Symbol><Normal Text> </Normal Text><Keyword>public</Keyword><Normal Text> U</Normal Text><br/>
<Symbol>{</Symbol><br/>
<Normal Text>    class1</Normal Text><Symbol>()</Symbol><br/>
<Normal Text>        </Normal Text><Control Flow>try</Control Flow><br/>
<Normal Text>        </Normal Text><Symbol>:</Symbol><Normal Text> </Normal Text><Internals>_member1</Internals><Symbol>(</Symbol><Normal Text>xxx</Normal Text><Symbol>)</Symbol><br/>
<Normal Text>    </Normal Text><Symbol>{}</Symbol><br/>
<Normal Text>        </Normal Text><Control Flow>catch</Control Flow><Symbol>(...)</Symbol><br/>
<Normal Text>    </Normal Text><Symbol>{}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    class1</Normal Text><Symbol>(</Symbol><Normal Text>class1</Normal Text><Symbol>&&)</Symbol><Normal Text> </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Control Flow>default</Control Flow><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Symbol>~</Symbol><Normal Text>class1</Normal Text><Symbol>()</Symbol><br/>
<Normal Text>    </Normal Text><Symbol>{}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Control Flow>return</Control Flow><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>    </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Control Flow>return</Control Flow><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>    </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Keyword>noexcept</Keyword><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Control Flow>return</Control Flow><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>    </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Keyword>noexcept</Keyword><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Control Flow>return</Control Flow><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>    </Normal Text><Keyword>virtual</Keyword><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Keyword>noexcept</Keyword><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Control Flow>return</Control Flow><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>    </Normal Text><Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Control Flow>return</Control Flow><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Symbol>}</Symbol><br/>
<Normal Text>    </Normal Text><Keyword>constexpr</Keyword><Normal Text> </Normal Text><Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><br/>
<Normal Text>        </Normal Text><Keyword>noexcept</Keyword><Symbol>(</Symbol><Keyword>noexcept</Keyword><Symbol>(</Symbol><Standard Classes>std::is_pointer</Standard Classes><Symbol><</Symbol><Normal Text>U</Normal Text><Symbol>>::</Symbol><Normal Text>value</Normal Text><Symbol>))</Symbol><Normal Text> </Normal Text><Keyword>override</Keyword><br/>
<Normal Text>    </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>        xxx</Normal Text><Symbol>::</Symbol><Keyword>template</Keyword><Normal Text> ttt</Normal Text><Symbol><</Symbol><Normal Text>U</Normal Text><Symbol>>::</Symbol><Normal Text>type </Normal Text><Symbol>{}</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>        xxx</Normal Text><Symbol>.</Symbol><Keyword>template</Keyword><Normal Text> get</Normal Text><Symbol><</Symbol><Normal Text>U</Normal Text><Symbol>>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>        xxx</Normal Text><Symbol>.</Symbol><Standard Classes>std::rdbuf</Standard Classes><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>        </Normal Text><Keyword>auto</Keyword><Normal Text> x </Normal Text><Symbol>=</Symbol><Normal Text> C</Normal Text><Symbol><</Symbol><Char>'a'</Char><Symbol>></Symbol><Normal Text> </Normal Text><Symbol>+</Symbol><Normal Text> y</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Data Type>int</Data Type><Normal Text> </Normal Text><Keyword>operator</Keyword><Symbol>->*(</Symbol><Normal Text>T </Normal Text><Symbol>(</Symbol><Normal Text>C</Normal Text><Symbol>::*</Symbol><Normal Text>m</Normal Text><Symbol>)(</Symbol><Data Type>int</Data Type><Symbol>))</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Keyword>operator</Keyword><Normal Text> </Normal Text><Types (*_t/*_type)>value_t</Types (*_t/*_type)><Normal Text> </Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>private</Keyword><Symbol>:</Symbol><br/>
<Keyword>protected</Keyword><Symbol>:</Symbol><br/>
<Keyword>public</Keyword><Symbol>:</Symbol><br/>
<Normal Text>    </Normal Text><Types (*_t/*_type)>value_type</Types (*_t/*_type)><Normal Text> </Normal Text><Internals>_member1</Internals><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// </Comment><Alert Level 3>NOTE</Alert Level 3><Comment> internal ?</Comment><br/>
<Normal Text>    </Normal Text><Types (*_t/*_type)>value_type</Types (*_t/*_type)><Normal Text> </Normal Text><Internals>__internal</Internals><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Types (*_t/*_type)>value_type</Types (*_t/*_type)><Normal Text> </Normal Text><Internals>internal__</Internals><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Types (*_t/*_type)>value_type</Types (*_t/*_type)><Normal Text> </Normal Text><Internals>_M_internal</Internals><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Types (*_t/*_type)>value_t</Types (*_t/*_type)><Normal Text> </Normal Text><Data Members (m_*)>member2_</Data Members (m_*)><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Types (*_t/*_type)>value_type</Types (*_t/*_type)><Normal Text> </Normal Text><Data Members (m_*)>m_member3</Data Members (m_*)><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> </Normal Text><Statics (s_*)>s_static</Statics (s_*)><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Keyword>constexpr</Keyword><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> </Normal Text><Statics (s_*)>s_static</Statics (s_*)><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Keyword>inline</Keyword><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> </Normal Text><Statics (s_*)>s_static</Statics (s_*)><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Keyword>inline</Keyword><Normal Text> </Normal Text><Keyword>constexpr</Keyword><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> </Normal Text><Statics (s_*)>s_static</Statics (s_*)><Separator Symbol>;</Separator Symbol><br/>
<Symbol>}</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>constexpr</Keyword><Normal Text> </Normal Text><Keyword>struct</Keyword><Normal Text> </Normal Text><Symbol>:</Symbol><Normal Text> xyz</Normal Text><br/>
<Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Keyword>using</Keyword><Normal Text> xyz</Normal Text><Symbol>::</Symbol><Normal Text>xyz</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Keyword>using</Keyword><Normal Text> xyz</Normal Text><Symbol>::</Symbol><Keyword>operator</Keyword><Symbol>=</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Data Type>int</Data Type><Normal Text> a </Normal Text><Symbol>:</Symbol><Normal Text> </Normal Text><Decimal>1</Decimal><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Data Type>int</Data Type><Normal Text> b </Normal Text><Symbol>:</Symbol><Normal Text> </Normal Text><Decimal>7</Decimal><Separator Symbol>;</Separator Symbol><br/>
<Symbol>}</Symbol><Normal Text> x </Normal Text><Symbol>{}</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>template</Keyword><Symbol><</Symbol><Keyword>class</Keyword><Normal Text> T</Normal Text><Symbol>></Symbol><br/>
<Keyword>using</Keyword><Normal Text> is_pointer </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Standard Classes>std::is_pointer</Standard Classes><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>>::</Symbol><Normal Text>type</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>template</Keyword><Symbol><</Symbol><Keyword>class</Keyword><Normal Text> T</Normal Text><Symbol>></Symbol><br/>
<Keyword>constexpr</Keyword><Normal Text> </Normal Text><Keyword>auto</Keyword><Normal Text> is_pointer_v </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Standard Classes>std::is_pointer</Standard Classes><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>>::</Symbol><Normal Text>value</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Data Type>uint64_t</Data Type><Normal Text> namespaces</Normal Text><Symbol>()</Symbol><br/>
<Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Standard Classes>std::vector</Standard Classes><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Boost Stuff>boost::vector</Boost Stuff><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Internals>detail::vector</Internals><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Internals>details::vector</Internals><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Internals>aux::vector</Internals><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Internals>internals::vector</Internals><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    other</Normal Text><Symbol>::</Symbol><Normal Text>vector</Normal Text><Symbol><</Symbol><Normal Text>T</Normal Text><Symbol>></Symbol><Separator Symbol>;</Separator Symbol><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>task</Normal Text><Symbol><></Symbol><Normal Text> tcp_echo_server</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>  </Normal Text><Data Type>char</Data Type><Normal Text> data</Normal Text><Symbol>[</Symbol><Decimal>1024</Decimal><Symbol>]</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>  </Normal Text><Control Flow>for</Control Flow><Normal Text> </Normal Text><Symbol>(</Symbol><Separator Symbol>;;</Separator Symbol><Symbol>)</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Data Type>size_t</Data Type><Normal Text> n </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Control Flow>co_await</Control Flow><Normal Text> socket</Normal Text><Symbol>.</Symbol><Normal Text>async_read_some</Normal Text><Symbol>(</Symbol><Normal Text>buffer</Normal Text><Symbol>(</Symbol><Normal Text>data</Normal Text><Symbol>))</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Control Flow>co_await</Control Flow><Normal Text> async_write</Normal Text><Symbol>(</Symbol><Normal Text>socket</Normal Text><Separator Symbol>,</Separator Symbol><Normal Text> buffer</Normal Text><Symbol>(</Symbol><Normal Text>data</Normal Text><Separator Symbol>,</Separator Symbol><Normal Text> n</Normal Text><Symbol>))</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>  </Normal Text><Symbol>}</Symbol><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 1</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else</Preprocessor><Comment> // else</Comment><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 0</Preprocessor><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#else</Preprocessor><Normal Text> </Normal Text><Comment>// else</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 1</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif</Preprocessor><Comment> 1</Comment><br/>
<Comment>    double foo(const A);</Comment><br/>
<Comment>#elif 0</Comment><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 0</Preprocessor><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#elif 1</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif</Preprocessor><Comment> 0</Comment><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 0</Preprocessor><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#elif a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif 0</Preprocessor><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#elif a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else </Preprocessor><Comment>// else</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 0 </Preprocessor><Comment>// blah blah</Comment><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#elif 1 </Preprocessor><Comment>// blah blah</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else</Preprocessor><Comment> // else</Comment><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 0 || a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else </Preprocessor><Comment>// else</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 1 || a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else</Preprocessor><Comment> // else</Comment><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 0 && a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else </Preprocessor><Comment>// else</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 1 && a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else </Preprocessor><Comment>// else</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif 0</Preprocessor><br/>
<Comment>    double foo(const A);</Comment><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif 1</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif a</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> A</Normal Text><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Data Type>int</Data Type><Normal Text> bar</Normal Text><Symbol>(</Symbol><Data Type>void</Data Type><Symbol>*</Symbol><Normal Text>p</Normal Text><Separator Symbol>,</Separator Symbol><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> </Normal Text><Symbol>*</Symbol><Normal Text> pp</Normal Text><Symbol>)</Symbol><br/>
<Symbol>{</Symbol><br/>
<Preprocessor># if 0</Preprocessor><br/>
<Comment>    double foo();</Comment><br/>
<Preprocessor># else</Preprocessor><Normal Text> </Normal Text><Comment>// else</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor># endif </Preprocessor><Comment>// end</Comment><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if abc 0</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if xxx</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#else</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if xxx</Preprocessor><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif xxx </Preprocessor><Comment>// elseif</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#elif xxx </Preprocessor><Comment>// elseif</Comment><br/>
<Normal Text>    </Normal Text><Data Type>double</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>// error</Comment><br/>
<Error>#</Error><br/>
<Preprocessor>#</Preprocessor><Error>d</Error><br/>
<Preprocessor># </Preprocessor><Error>d</Error><br/>
<Preprocessor>#</Preprocessor><Error>if</Error><br/>
<Preprocessor>#</Preprocessor><Error>elif</Error><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Preprocessor>#</Preprocessor><Error>ifndef</Error><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Preprocessor>#</Preprocessor><Error>ifdef 0</Error><br/>
<Preprocessor>#endif </Preprocessor><Comment>// end</Comment><br/>
<Normal Text></Normal Text><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> intWithSuffix </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>42</Decimal><Standard Suffix>ull</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>long</Data Type><Normal Text> intWithSuffixAndPrefix </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Binary>0b0101</Binary><Standard Suffix>L</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> octNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Octal>07232</Octal><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> invalidOctNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Error>9231</Error><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> hexNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Hex>0xDEADBEEF42</Hex><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> invalidHexNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Error>xGLDFKG</Error><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> binNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Binary>0b0101010</Binary><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int64_t</Data Type><Normal Text> intWithSuffix </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Decimal>42</Decimal><Standard Suffix>LL</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>long</Data Type><Normal Text> intWithSuffixAndPrefix </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Binary>0b0101</Binary><Standard Suffix>L</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> octNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Octal>07232</Octal><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> invalidOctNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Decimal>0</Decimal><Error>9231</Error><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int64_t</Data Type><Normal Text> hexNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Hex>0xDEADBEEF42</Hex><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int64_t</Data Type><Normal Text> invalidHexNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Decimal>0</Decimal><Error>xGLDFKG</Error><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> binNum </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Binary>0b0101010</Binary><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> intWithSuffixWithSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>4'2</Decimal><Standard Suffix>ull</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>long</Data Type><Normal Text> intWithSuffixAndPrefixWithSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Binary>0b0'10'1</Binary><Standard Suffix>L</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> octNumWithSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Octal>07'232</Octal><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> invalidOctNumWithSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Error>9'23'1</Error><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> hexNumWithSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Hex>0xD'EAD'BE'EF'42</Hex><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> invalidHexNumWithSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>0</Decimal><Error>xGLD'FKG</Error><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> binNumWithSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Binary>0b0'1010'10</Binary><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> invalidSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>42</Decimal><Error>'</Error><Standard Suffix>ull</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>uint64_t</Data Type><Normal Text> invalidSep </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>42</Decimal><Error>'</Error><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d1 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>42.</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d2 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>.42</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d2a </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Float>0.49</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d2b </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Symbol>-</Symbol><Float>0.09</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d3 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>42.3e1</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d4 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>.2e-12</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d5 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>32.e+12</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> invalidD1 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>32.</Float><Error>e</Error><Symbol>+</Symbol><Normal Text>a12</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>float</Data Type><Normal Text> floatQualifier </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>23.123</Float><Standard Suffix>f</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Comment>// Hexadecimal floating point (c++17)</Comment><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d6 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0x1ffp10</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d7 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0X0p-1</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d8 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0x1.p0</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d9 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0xf.p-1</Float><Standard Suffix>L</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d10 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0x0.123p-1</Float><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> d11 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0xa.bp10</Float><Standard Suffix>l</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>double</Data Type><Normal Text> invalidD2 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0x0.123</Float><Error>p</Error><Symbol>-</Symbol><Normal Text>a</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>float</Data Type><Normal Text> floatQualifier </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Float>0xf.p-1</Float><Standard Suffix>f</Standard Suffix><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Decimal>60</Decimal><Standard Classes>min</Standard Classes><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// c++17</Comment><br/>
<Float>60.</Float><Standard Classes>min</Standard Classes><Separator Symbol>;</Separator Symbol><br/>
<Float>60.3</Float><Standard Classes>min</Standard Classes><Separator Symbol>;</Separator Symbol><br/>
<Float>0x1ffp10</Float><Standard Classes>min</Standard Classes><Separator Symbol>;</Separator Symbol><br/>
<Decimal>2</Decimal><Standard Classes>us</Standard Classes><br/>
<Decimal>2</Decimal><Standard Classes>d</Standard Classes><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// c++20</Comment><br/>
<Float>23.</Float><UDL Numeric Suffix>_f</UDL Numeric Suffix><br/>
<Float>23.</Float><UDL Numeric Suffix>_fd</UDL Numeric Suffix><br/>
<Float>2.3</Float><UDL Numeric Suffix>_f</UDL Numeric Suffix><br/>
<Float>2.3</Float><UDL Numeric Suffix>_fd</UDL Numeric Suffix><br/>
<Float>2.</Float><UDL Numeric Suffix>_f</UDL Numeric Suffix><br/>
<Float>2.</Float><UDL Numeric Suffix>_fd</UDL Numeric Suffix><br/>
<Float>2e4</Float><UDL Numeric Suffix>_f</UDL Numeric Suffix><br/>
<Float>2e4</Float><UDL Numeric Suffix>_fd</UDL Numeric Suffix><br/>
<Normal Text></Normal Text><br/>
<Comment>// error</Comment><br/>
<Float>23.</Float><Standard Suffix>f</Standard Suffix><Error>d</Error><br/>
<Decimal>2</Decimal><Error>e_fd</Error><br/>
<Decimal>2</Decimal><Error>e</Error><br/>
<Float>1.</Float><Error>y</Error><br/>
<Float>1.0</Float><Error>_E+</Error><Float>2.0</Float><br/>
<Float>1.0</Float><UDL Numeric Suffix>_E</UDL Numeric Suffix><Normal Text> </Normal Text><Symbol>+</Symbol><Float>2.0</Float><Normal Text> </Normal Text><Comment>// ok</Comment><br/>
<Decimal>1</Decimal><Error>_p+</Error><Decimal>2</Decimal><br/>
<Decimal>1</Decimal><UDL Numeric Suffix>_p</UDL Numeric Suffix><Normal Text> </Normal Text><Symbol>+</Symbol><Decimal>2</Decimal><Normal Text> </Normal Text><Comment>// ok</Comment><br/>
<Decimal>4</Decimal><Standard Classes>s</Standard Classes><Error>.count</Error><Symbol>()</Symbol><br/>
<Decimal>4</Decimal><Standard Classes>s</Standard Classes><Error>.</Error><Normal Text> count</Normal Text><Symbol>()</Symbol><br/>
<Decimal>4</Decimal><Standard Classes>s</Standard Classes><Normal Text> </Normal Text><Symbol>.</Symbol><Normal Text>count</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Comment>// ok</Comment><br/>
<Normal Text></Normal Text><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>bool</Data Type><Normal Text> yes </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Keyword>true</Keyword><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Data Type>bool</Data Type><Normal Text> no </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Keyword>false</Keyword><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// *char*</Comment><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text>     c1 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char>'c'</Char><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text>     c1a </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char Literal Prefix>u8</Char Literal Prefix><Char>'c'</Char><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// utf-8 char (c++17)</Comment><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char16_t</Data Type><Normal Text> c1b </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char Literal Prefix>u</Char Literal Prefix><Char>'c'</Char><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char32_t</Data Type><Normal Text> c1c </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char Literal Prefix>U</Char Literal Prefix><Char>'c'</Char><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>wchar_t</Data Type><Normal Text>  c1d </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char Literal Prefix>L</Char Literal Prefix><Char>'c'</Char><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> c2 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char>'</Char><String Char>\n</String Char><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> c2a </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char>'</Char><String Char>\120</String Char><Char>'</Char><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// octal</Comment><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> c2b </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char>'</Char><String Char>\x1f</String Char><Char>'</Char><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// hex</Comment><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> c2c </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char>'</Char><String Char>\'</String Char><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Normal Text> c2d </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char>'</Char><String Char>\\</String Char><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>wchar_t</Data Type><Normal Text> c2e </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char Literal Prefix>L</Char Literal Prefix><Char>'</Char><String Char>\x1ff</String Char><Char>'</Char><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// hex</Comment><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>wchar_t</Data Type><Normal Text> c2e </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Char Literal Prefix>U</Char Literal Prefix><Char>'</Char><String Char>\x1fffffff</String Char><Char>'</Char><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// hex</Comment><br/>
<Comment>// error</Comment><br/>
<Char>'</Char><String Char>\x12</String Char><Error>3</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Char>'\</Char><Error>u1234</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Char>'\</Char><Error>U12345678</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Char Literal Prefix>U</Char Literal Prefix><Char>'</Char><String Char>\u1234</String Char><Error>5</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Char Literal Prefix>u</Char Literal Prefix><Char>'\</Char><Error>u123</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Char Literal Prefix>U</Char Literal Prefix><Char>'\</Char><Error>U1234567</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Char Literal Prefix>U</Char Literal Prefix><Char>'</Char><String Char>\U12345678</String Char><Error>9</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Char Literal Prefix>U</Char Literal Prefix><Char>'</Char><String Char>\x12345678</String Char><Error>9</Error><Char>'</Char><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// string</Comment><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text> c3 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>"string"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text> c4 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>"</String><String Char>\"</String Char><String>string</String><String Char>\n\t\012\x12\"</String Char><String>"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text> c5 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>"multiline </String><Separator Symbol>\</Separator Symbol><br/>
<String>    string"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text> c6 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String>"multifragment"</String><Normal Text> </Normal Text><String>"other""string"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text>      c6a </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String Literal Prefix>u8</String Literal Prefix><String>"string"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char16_t</Data Type><Symbol>*</Symbol><Normal Text>  c6b </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String Literal Prefix>u</String Literal Prefix><String>"string"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char32_t</Data Type><Symbol>*</Symbol><Normal Text>  c6c </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String Literal Prefix>U</String Literal Prefix><String>"string"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>wchar_t</Data Type><Symbol>*</Symbol><Normal Text>   c6d </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><String Literal Prefix>L</String Literal Prefix><String>"string"</String><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text> rawString1 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Raw String Literal Prefix>R</Raw String Literal Prefix><Raw String Delimiter>"(</Raw String Delimiter><Raw String>string</Raw String><Raw String Delimiter>)"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text>      rawString1a </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Raw String Literal Prefix>u8R</Raw String Literal Prefix><Raw String Delimiter>"(</Raw String Delimiter><Raw String>string</Raw String><Raw String Delimiter>)"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char16_t</Data Type><Symbol>*</Symbol><Normal Text>  rawString1b </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Raw String Literal Prefix>uR</Raw String Literal Prefix><Raw String Delimiter>"(</Raw String Delimiter><Raw String>string</Raw String><Raw String Delimiter>)"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char32_t</Data Type><Symbol>*</Symbol><Normal Text>  rawString1c </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Raw String Literal Prefix>UR</Raw String Literal Prefix><Raw String Delimiter>"(</Raw String Delimiter><Raw String>string</Raw String><Raw String Delimiter>)"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>wchar_t</Data Type><Symbol>*</Symbol><Normal Text>   rawString1d </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Raw String Literal Prefix>LR</Raw String Literal Prefix><Raw String Delimiter>"(</Raw String Delimiter><Raw String>string\nstring</Raw String><Raw String Delimiter>)"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text> rawString2 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Raw String Literal Prefix>R</Raw String Literal Prefix><Raw String Delimiter>"ab(</Raw String Delimiter><Raw String>string\nstring</Raw String><String Char>%s</String Char><Raw String>)ab "</Raw String><Raw String Delimiter>)ab"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<Type Modifiers>static</Type Modifiers><Normal Text> </Normal Text><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*</Symbol><Normal Text> rawString3 </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Raw String Literal Prefix>R</Raw String Literal Prefix><Raw String Delimiter>"ab(</Raw String Delimiter><Raw String>string</Raw String><br/>
<Raw String>string%</Raw String><Raw String Delimiter>)ab"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<String>" </String><String Char>%d</String Char><String> </String><String Char>%d</String Char><String>f fd"</String><Normal Text> </Normal Text><String Literal Prefix>U</String Literal Prefix><String>"ds </String><String Char>%d</String Char><String>"</String><Normal Text> </Normal Text><Raw String Literal Prefix>R</Raw String Literal Prefix><Raw String Delimiter>"(</Raw String Delimiter><Raw String>a</Raw String><String Char>%d</String Char><Raw String Delimiter>)"</Raw String Delimiter><Separator Symbol>;</Separator Symbol><br/>
<String>"</String><String Char>\x{12343}</String Char><String> </String><String Char>\x{1}</String Char><String> </String><String Char>\o{12121}</String Char><String> </String><String Char>\u{1221a}</String Char><String> </String><String Char>\N{LATIN CAPITAL LETTER A WITH MACRON}</String Char><String>"</String><br/>
<Normal Text>  </Normal Text><String>"</String><String Char>\x12</String Char><Error>3</Error><String>xsk"</String><Separator Symbol>;</Separator Symbol><br/>
<Normal Text> </Normal Text><String Literal Prefix>u</String Literal Prefix><String>"</String><String Char>\x123</String Char><String>xsk"</String><Separator Symbol>;</Separator Symbol><br/>
<Comment>// error</Comment><br/>
<String Literal Prefix>u8</String Literal Prefix><String>"</String><String Char>\x12</String Char><Error>3</Error><String>xsk"</String><Separator Symbol>;</Separator Symbol><br/>
<String>"</String><Error>\x{123</Error><String>x43} </String><Error>\o{121</Error><String>821} </String><Error>\u{12</Error><String>x21as} </String><Error>\N{LATIN CAPITAL </Error><String>letter A WITH MACRON}"</String><br/>
<Normal Text></Normal Text><br/>
<Comment>// printf format</Comment><br/>
<String>"a</String><String Char>%10s</String Char><String>a</String><String Char>%-10s</String Char><String>a</String><String Char>%*s</String Char><String>a</String><String Char>%-10.*s</String Char><String>a</String><String Char>%-*.*s</String Char><String>a"</String><br/>
<String>"a</String><String Char>%c</String Char><String>a</String><String Char>%*c</String Char><String>a</String><String Char>%%</String Char><String>a</String><String Char>%i</String Char><String>a</String><String Char>%d</String Char><String>a</String><String Char>%.6i</String Char><String>a</String><String Char>%.0i</String Char><String>a</String><String Char>%+i</String Char><String>a</String><String Char>%i</String Char><String>a</String><String Char>%x</String Char><String>a</String><String Char>%#x</String Char><String>a"</String><br/>
<String>"a</String><String Char>%.0f</String Char><String>a</String><String Char>%.32f</String Char><String>a</String><String Char>%05.2f</String Char><String>a</String><String Char>%.2f</String Char><String>a</String><String Char>%5.2f</String Char><String>a</String><String Char>%E</String Char><String>a</String><String Char>%a</String Char><String>a"</String><br/>
<Comment>// std::format</Comment><br/>
<String>"a</String><String Char>{{</String Char><String>:6</String><String Char>}}</String Char><String>a</String><String Char>{}</String Char><String>a</String><String Char>{:6}</String Char><String>a</String><String Char>{:*<6}</String Char><String>a</String><String Char>{:6d}</String Char><String>a"</String><br/>
<String>"a</String><String Char>{0:}</String Char><String>a</String><String Char>{0:+}</String Char><String>a</String><String Char>{0:-}</String Char><String>a</String><String Char>{0: }</String Char><String>a"</String><br/>
<String>"a</String><String Char>{:+06d}</String Char><String>a</String><String Char>{:#06x}</String Char><String>a</String><String Char>{:<06}</String Char><String>a"</String><br/>
<String>"a</String><String Char>{:{}}</String Char><String>a</String><String Char>{0:{1}.{2}f}</String Char><String>a"</String><br/>
<Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// UDL (c++11)</Comment><br/>
<Normal Text></Normal Text><br/>
<Keyword>operator</Keyword><String>""</String><Normal Text>_a</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Keyword>operator</Keyword><Normal Text> </Normal Text><String>""</String><Normal Text>_a</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Keyword>operator</Keyword><Normal Text> </Normal Text><String>""</String><Normal Text> _a</Normal Text><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Comment>// invalid suffix</Comment><br/>
<Keyword>operator</Keyword><Normal Text> </Normal Text><String>""</String><Normal Text> </Normal Text><Error>a</Error><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Keyword>operator</Keyword><Normal Text> </Normal Text><String>""</String><Error>a</Error><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Keyword>operator</Keyword><String>""</String><Error>a</Error><Symbol>(</Symbol><Type Modifiers>const</Type Modifiers><Normal Text> </Normal Text><Data Type>char</Data Type><Symbol>*)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<String>"string"</String><UDL String Suffix>_s</UDL String Suffix><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// user</Comment><br/>
<String>"string"</String><Standard Classes>s</Standard Classes><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// standard</Comment><br/>
<String>"string"</String><UDL String Suffix>_s</UDL String Suffix><Symbol>-</Symbol><Normal Text>b</Normal Text><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// -b is not part of the string</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>// Macro</Comment><br/>
<Normal Text></Normal Text><br/>
<CONSTS/MACROS>MY_XXX</CONSTS/MACROS><Separator Symbol>;</Separator Symbol><br/>
<Boost Stuff>BOOST_XXX</Boost Stuff><Separator Symbol>;</Separator Symbol><br/>
<GNU Macros>__STDC_VERSION__</GNU Macros><Separator Symbol>;</Separator Symbol><br/>
<Standard Macros>__TIME__</Standard Macros><Separator Symbol>;</Separator Symbol><br/>
<GNU Macros>__cplusplus</GNU Macros><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>// Attributes</Comment><br/>
<Normal Text></Normal Text><br/>
<Symbol>[[</Symbol><Standard Attribute>noreturn</Standard Attribute><Symbol>]]</Symbol><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Symbol>[[</Symbol><Standard Attribute>deprecated</Standard Attribute><Symbol>]]</Symbol><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Symbol>[[</Symbol><Standard Attribute>deprecated</Standard Attribute><Symbol>(</Symbol><String>"because"</String><Symbol>)]]</Symbol><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Data Type>void</Data Type><Normal Text> foo</Normal Text><Symbol>([[</Symbol><Standard Attribute>carries_dependency</Standard Attribute><Symbol>]]</Symbol><Normal Text> </Normal Text><Data Type>int</Data Type><Symbol>)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Symbol>[[</Symbol><Attribute>opt</Attribute><Symbol>(</Symbol><Decimal>1</Decimal><Symbol>)</Symbol><Separator Symbol>,</Separator Symbol><Attribute> debug</Attribute><Symbol>]]</Symbol><br/>
<Symbol>[[</Symbol><Keyword>using</Keyword><Attribute> CC</Attribute><Symbol>:</Symbol><Attribute> opt</Attribute><Symbol>(</Symbol><Decimal>1</Decimal><Symbol>)</Symbol><Separator Symbol>,</Separator Symbol><Attribute> debug</Attribute><Symbol>]]</Symbol><Normal Text> </Normal Text><Comment>// c++17</Comment><br/>
<Symbol>[[</Symbol><Keyword>using</Keyword><Attribute> CC</Attribute><Symbol>:</Symbol><Attribute> CC</Attribute><Symbol>::</Symbol><Attribute>opt</Attribute><Symbol>(</Symbol><Decimal>1</Decimal><Symbol>)]]</Symbol><Normal Text> </Normal Text><Comment>// c++17</Comment><br/>
<Normal Text></Normal Text><br/>
<Symbol>[[</Symbol><GNU Extensions>gnu::assume_aligned</GNU Extensions><Symbol>(</Symbol><Decimal>3'2</Decimal><Standard Suffix>l</Standard Suffix><Separator Symbol>,</Separator Symbol><Decimal>2</Decimal><Symbol>)]]</Symbol><Normal Text> </Normal Text><Data Type>void</Data Type><Symbol>*</Symbol><Normal Text> f</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Symbol>[[</Symbol><Keyword>using</Keyword><Attribute> </Attribute><GNU Extensions>gnu</GNU Extensions><Symbol>:</Symbol><Attribute> assume_aligned</Attribute><Symbol>(</Symbol><Decimal>3</Decimal><Symbol>)]]</Symbol><br/>
<Symbol>[[</Symbol><GNU Extensions>clang::assume_aligned</GNU Extensions><Symbol>(</Symbol><Decimal>3</Decimal><Symbol>)]]</Symbol><br/>
<Normal Text></Normal Text><br/>
<Data Type>void</Data Type><Normal Text> f</Normal Text><Symbol>([[</Symbol><Standard Attribute>maybe_unused</Standard Attribute><Symbol>]]</Symbol><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> val</Normal Text><Symbol>)</Symbol><br/>
<Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Symbol>[[</Symbol><Standard Attribute>maybe_unused</Standard Attribute><Symbol>]]</Symbol><Normal Text> </Normal Text><Data Type>int</Data Type><Normal Text> x</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Control Flow>switch</Control Flow><Normal Text> </Normal Text><Symbol>(</Symbol><Normal Text>x </Normal Text><Symbol>=</Symbol><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><Normal Text> x</Normal Text><Symbol>)</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>        </Normal Text><Control Flow>case</Control Flow><Normal Text> </Normal Text><Decimal>1</Decimal><Symbol>:</Symbol><br/>
<Normal Text>            </Normal Text><Symbol>[[</Symbol><Standard Attribute>fallthrough</Standard Attribute><Symbol>]]</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>        </Normal Text><Control Flow>case</Control Flow><Normal Text> </Normal Text><CONSTS/MACROS>XXX</CONSTS/MACROS><Symbol>:</Symbol><br/>
<Normal Text>        </Normal Text><Control Flow>case</Control Flow><Normal Text> Class</Normal Text><Symbol>::</Symbol><Normal Text>foo</Normal Text><Symbol>():</Symbol><br/>
<Normal Text>            </Normal Text><Symbol>[[</Symbol><Standard Attribute>fallthrough</Standard Attribute><Symbol>]]</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>        </Normal Text><Control Flow>default</Control Flow><Symbol>:</Symbol><br/>
<Normal Text>            </Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Comment>// c++17: fold expression</Comment><br/>
<Normal Text>    </Normal Text><Symbol>(</Symbol><Normal Text>args </Normal Text><Symbol>+</Symbol><Normal Text> </Normal Text><Symbol>...</Symbol><Normal Text> </Normal Text><Symbol>+</Symbol><Normal Text> </Normal Text><Symbol>(</Symbol><Decimal>1</Decimal><Normal Text> </Normal Text><Symbol>*</Symbol><Normal Text> </Normal Text><Decimal>2</Decimal><Symbol>))</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Symbol>(</Symbol><Normal Text>v</Normal Text><Symbol>.</Symbol><Normal Text>push_back</Normal Text><Symbol>(</Symbol><Normal Text>args</Normal Text><Symbol>)</Symbol><Separator Symbol>,</Separator Symbol><Normal Text> </Normal Text><Symbol>...)</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Symbol>[[</Symbol><Attribute>omp</Attribute><Symbol>::</Symbol><Attribute>parallel</Attribute><Symbol>]]</Symbol><Normal Text> </Normal Text><Control Flow>for</Control Flow><Normal Text> </Normal Text><Symbol>(</Symbol><Keyword>auto</Keyword><Symbol>&&</Symbol><Normal Text> x </Normal Text><Symbol>:</Symbol><Normal Text> v</Normal Text><Symbol>)</Symbol><br/>
<Normal Text>        x</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text>    </Normal Text><Control Flow>for</Control Flow><Normal Text> </Normal Text><Symbol>(</Symbol><Keyword>auto</Keyword><Symbol>&&</Symbol><Normal Text> </Normal Text><Symbol>[</Symbol><Normal Text>first</Normal Text><Separator Symbol>,</Separator Symbol><Normal Text>second</Normal Text><Symbol>]</Symbol><Normal Text> </Normal Text><Symbol>:</Symbol><Normal Text> mymap</Normal Text><Symbol>)</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>    </Normal Text><Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Keyword>auto</Keyword><Normal Text> </Normal Text><Symbol>[</Symbol><Normal Text>x</Normal Text><Separator Symbol>,</Separator Symbol><Normal Text> y</Normal Text><Symbol>]</Symbol><Normal Text> </Normal Text><Symbol>=</Symbol><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Symbol>[</Symbol><Normal Text>x </Normal Text><Symbol>=</Symbol><Normal Text> </Normal Text><Decimal>1</Decimal><Separator Symbol>,</Separator Symbol><Normal Text> </Normal Text><Symbol>=</Symbol><Normal Text>y</Normal Text><Symbol>](){}</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>    </Normal Text><Keyword>decltype</Keyword><Symbol>((</Symbol><Keyword>auto</Keyword><Symbol>))</Symbol><Normal Text> x </Normal Text><Symbol>=</Symbol><Normal Text> foo</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>auto</Keyword><Normal Text> f</Normal Text><Symbol>()</Symbol><Normal Text> </Normal Text><Symbol>-></Symbol><Normal Text> </Normal Text><Keyword>decltype</Keyword><Symbol>(</Symbol><Normal Text>foo</Normal Text><Symbol>())</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<GNU Extensions>__attribute__((pure))</GNU Extensions><Normal Text> </Normal Text><Data Type>void</Data Type><Normal Text> f</Normal Text><Symbol>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text>label</Normal Text><Symbol>:</Symbol><br/>
<Control Flow>goto</Control Flow><Normal Text> label</Normal Text><Separator Symbol>;</Separator Symbol><br/>
<Normal Text></Normal Text><br/>
<Normal Text></Normal Text><br/>
<Region Marker>//BEGIN region</Region Marker><br/>
<Comment>// </Comment><Alert Level 2>TODO</Alert Level 2><Comment> comment </Comment><Alert Level 2>FIXME</Alert Level 2><Comment> comment </Comment><Alert Level 3>###</Alert Level 3><Comment> comment </Comment><Alert Level 2>BUG</Alert Level 2><Comment> comment</Comment><br/>
<Region Marker>//END region</Region Marker><br/>
<Normal Text></Normal Text><br/>
<Comment>// \brief blah blah</Comment><br/>
<Comment>/// </Comment><Tags>\brief</Tags><Comment> blah blah</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>/**</Comment><br/>
<Comment> * Doxygen</Comment><br/>
<Comment> * </Comment><Tags>@param</Tags><Comment> </Comment><Word>p1</Word><Comment> text</Comment><br/>
<Comment> * </Comment><Tags>\brief</Tags><Comment> </Comment><HTML Tag><b></HTML Tag><Comment>bold text</Comment><HTML Tag></b></HTML Tag><br/>
<Comment> * </Comment><Tags>\dot</Tags><br/>
<Comment> *</Comment><Dot Graph> a -> b</Dot Graph><br/>
<Comment> *</Comment><Dot Graph> </Dot Graph><Tags>\enddot</Tags><br/>
<Comment> *</Comment><br/>
<Comment> * </Comment><Tags>\verbatim</Tags><br/>
<Comment> *</Comment><Verbatim> <dummy></Verbatim><br/>
<Comment> *</Comment><Verbatim> </Verbatim><Tags>\endverbatim</Tags><br/>
<Comment> * </Comment><HTML Tag><html></HTML Tag><Comment>text</Comment><HTML Tag></html></HTML Tag><br/>
<Comment> */</Comment><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Comment>// Some GNU macros, cross-referenced from gcc.xml to isocpp.xml</Comment><br/>
<GNU Macros>__GCC_ATOMIC_CHAR16_T_LOCK_FREE</GNU Macros><br/>
<GNU Macros>__GNUC__</GNU Macros><br/>
<GNU Macros>__linux__</GNU Macros><br/>
<Normal Text></Normal Text><br/>
<Comment>// Digraphs (see bug #411508)</Comment><br/>
<Preprocessor>%:include </Preprocessor><Prep. Lib><stdio.h></Prep. Lib><br/>
<Data Type>int</Data Type><Normal Text> main</Normal Text><Symbol>()</Symbol><br/>
<Symbol><%</Symbol><br/>
<Normal Text>    </Normal Text><Symbol>[](){%>()</Symbol><Separator Symbol>;</Separator Symbol><br/>
<Symbol>}</Symbol><br/>
<Symbol><:<:</Symbol><Standard Attribute>fallthrough</Standard Attribute><Symbol>]]</Symbol><br/>
<Normal Text></Normal Text><br/>
<Comment>/**</Comment><br/>
<Comment> * multi-line comment</Comment><br/>
<Comment> */</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>/* comment */</Comment><br/>
<Symbol>{</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><Normal Text> </Normal Text><Symbol>}</Symbol><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Region Marker>//BEGIN</Region Marker><br/>
<Symbol>}</Symbol><br/>
<Region Marker>//END</Region Marker><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 0</Preprocessor><br/>
<Preprocessor>#elif 1</Preprocessor><br/>
<Preprocessor>#else</Preprocessor><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Preprocessor>#if 1</Preprocessor><br/>
<Data Type>int</Data Type><Normal Text> x</Normal Text><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// variable shall not be grey</Comment><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Preprocessor>#if defined (A)</Preprocessor><br/>
<Data Type>int</Data Type><Normal Text> y</Normal Text><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// variable shall not be grey</Comment><br/>
<Preprocessor>#elif defined (B)</Preprocessor><br/>
<Data Type>int</Data Type><Normal Text> z</Normal Text><Separator Symbol>;</Separator Symbol><Normal Text> </Normal Text><Comment>// variable shall not be grey</Comment><br/>
<Preprocessor>#endif</Preprocessor><br/>
<Normal Text></Normal Text><br/>
<Comment>/*!</Comment><br/>
<Comment> * formula </Comment><Tags>@f$</Tags><Formulas>a+b</Formulas><Tags>@f$</Tags><Comment> inside a block comment</Comment><br/>
<Comment> */</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>//! formula </Comment><Tags>@f$</Tags><Formulas>a+b</Formulas><Tags>@f$</Tags><Comment> inside a inline comment</Comment><br/>
<Comment>// formula @f$a+b@f$ inside a normal comment</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>/// </Comment><Tags>\b</Tags><Comment> </Comment><Word>sa</Word><br/>
