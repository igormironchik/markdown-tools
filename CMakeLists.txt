# SPDX-FileCopyrightText: 2024 Igor Mironchik <igor.mironchik@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later

cmake_minimum_required( VERSION 3.19 )

project( markdown-tools )

option( BUILD_MDPDF_TESTS "Build tests? Default ON." ON )

list( PREPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR} )
list( PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR} )
list( PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake )

set( KF_MIN_VERSION "5.246.0" )
set( KF_MAJOR_VERSION "6" )

find_package( ECM ${KF_MIN_VERSION} NO_MODULE )
list( APPEND CMAKE_MODULE_PATH  ${ECM_MODULE_PATH} )

include( ECMEnableSanitizers )

set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin )

execute_process( COMMAND git rev-parse --short HEAD
	OUTPUT_VARIABLE MARKDOWN_TOOLS_VERSION_MINOR
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	OUTPUT_STRIP_TRAILING_WHITESPACE )

set( MDPDF_VERSION "0.9.69 build ${MARKDOWN_TOOLS_VERSION_MINOR}" )
set( MDEDITOR_VERSION "0.1.68 build ${MARKDOWN_TOOLS_VERSION_MINOR}" )

find_package( QT NAMES Qt6 REQUIRED COMPONENTS Core )

if( UNIX AND NOT APPLE )
	list( PREPEND CMAKE_INSTALL_RPATH "${QT6_INSTALL_PREFIX}/lib:\$ORIGIN/../lib" )
else()
	list( PREPEND CMAKE_INSTALL_RPATH "${QT6_INSTALL_PREFIX}/lib" )
	list( PREPEND CMAKE_INSTALL_RPATH "@executable_path/../lib" )
	list( PREPEND CMAKE_INSTALL_RPATH "@loader_path/../lib" )
endif()

set( CMAKE_BUILD_WITH_INSTALL_RPATH TRUE )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE )
set( CMAKE_MACOSX_RPATH TRUE )

link_directories( ${CMAKE_BINARY_DIR}/lib )

if( NOT CMAKE_BUILD_TYPE )
	set( CMAKE_BUILD_TYPE "Release"
		CACHE STRING "Choose the type of build."
		FORCE)
endif( NOT CMAKE_BUILD_TYPE )

set( CMAKE_CXX_STANDARD 17 )

set( CMAKE_CXX_STANDARD_REQUIRED ON )

if( NOT DEFINED _DISABLE_INSTALLATION )
  set( _DISABLE_INSTALLATION FALSE )

	macro(install)
		if( NOT _DISABLE_INSTALLATION )
			_install( ${ARGN} )
		endif()
	endmacro()
endif()

set( _DISABLE_INSTALLATION TRUE )
set( PODOFO_BUILD_LIB_ONLY ON CACHE INTERNAL "" FORCE )
add_subdirectory( 3rdparty/podofo )

set( JKQtPlotter_BUILD_EXAMPLES OFF CACHE INTERNAL "" FORCE )
set( JKQtPlotter_BUILD_TOOLS OFF CACHE INTERNAL "" FORCE )
set( JKQtPlotter_BUILD_TESTS OFF CACHE INTERNAL "" FORCE )
set( JKQtPlotter_BUILD_LIB_JKQTFASTPLOTTER OFF CACHE INTERNAL "" FORCE )
set( JKQtPlotter_BUILD_LIB_JKQTPLOTTER OFF CACHE INTERNAL "" FORCE )
add_subdirectory( 3rdparty/JKQtPlotter )

set( BUILD_MD4QT_QT_TESTS OFF CACHE INTERNAL "" FORCE )
add_subdirectory( 3rdparty/md4qt )

find_package( Perl REQUIRED )

include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/args-parser
	${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/cfgfile
	${md4qt_INCLUDE_DIRECTORIES} )

add_subdirectory( 3rdparty/cfgfile/generator )
set( _DISABLE_INSTALLATION FALSE )

install( TARGETS podofo_shared )
install( TARGETS JKQTCommon${QT_VERSION_MAJOR} )
install( TARGETS JKQTMath${QT_VERSION_MAJOR} )
install( TARGETS JKQTMathText${QT_VERSION_MAJOR} )

set( CFGFILE_GENERATOR ${CMAKE_CURRENT_BINARY_DIR}/bin/cfgfile.generator${CMAKE_EXECUTABLE_SUFFIX} )

add_subdirectory( src )

if( BUILD_MDPDF_TESTS )
	enable_testing()

	add_subdirectory( tests )
endif()
